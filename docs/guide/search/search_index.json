{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Photon \u00b6 Photon is a high-performance image processing library, written in Rust and compilable to WebAssembly, which can be used both natively and on the web. It allows developers to apply filters, effects and manipulate channels of their images, as well as apply standard image processing operations such as blurring, cropping, resizing, etc., Features \u00b6 High-performance : Photon outperforms even the fastest of libraries, including ImageMagick and the Python Imaging Library. Safety and Security : Written in Rust, this library guarantees memory safety. Over 80 effects : Boasting over 80 effects. Use on the web or natively . Cross-platform This guide will help you install Photon and start using it either natively or on the web. Image Effects Available \u00b6 Transformations - Crop, resize, flip, and rotate images. Filters - Apply image filters. Channel Manipulation - Alter channels to create new tinted images, channel-related effects. Special Effects - From solarization to offset fx to blending, over 20 special fx available. Correction - Sharpen, brighten, darken, saturate, color correction Web Demo \u00b6 To view a demo of Photon in action, click here . Documentation \u00b6 See the documentation here. Featured In \u00b6 See what others have to say about Photon: Stephen Downes' Note on Photon Ready To Get Started? \u00b6 Get started with WebAssembly. Get started with Rust for native use.","title":"About"},{"location":"#photon","text":"Photon is a high-performance image processing library, written in Rust and compilable to WebAssembly, which can be used both natively and on the web. It allows developers to apply filters, effects and manipulate channels of their images, as well as apply standard image processing operations such as blurring, cropping, resizing, etc.,","title":"Photon"},{"location":"#features","text":"High-performance : Photon outperforms even the fastest of libraries, including ImageMagick and the Python Imaging Library. Safety and Security : Written in Rust, this library guarantees memory safety. Over 80 effects : Boasting over 80 effects. Use on the web or natively . Cross-platform This guide will help you install Photon and start using it either natively or on the web.","title":"Features "},{"location":"#image-effects-available","text":"Transformations - Crop, resize, flip, and rotate images. Filters - Apply image filters. Channel Manipulation - Alter channels to create new tinted images, channel-related effects. Special Effects - From solarization to offset fx to blending, over 20 special fx available. Correction - Sharpen, brighten, darken, saturate, color correction","title":"Image Effects Available"},{"location":"#web-demo","text":"To view a demo of Photon in action, click here .","title":"Web Demo"},{"location":"#documentation","text":"See the documentation here.","title":"Documentation"},{"location":"#featured-in","text":"See what others have to say about Photon: Stephen Downes' Note on Photon","title":"Featured In"},{"location":"#ready-to-get-started","text":"Get started with WebAssembly. Get started with Rust for native use.","title":"Ready To Get Started?"},{"location":"all-effects/","text":"All Functions \u00b6 All effects and functions are available in the documentation. See documentation .","title":"All Functions"},{"location":"all-effects/#all-functions","text":"All effects and functions are available in the documentation. See documentation .","title":"All Functions"},{"location":"contact-developer/","text":"Contact Photon's Developer \u00b6 Got a question, feature request or issue? \u00b6 If you've got any questions, feature requests or bugs you'd like to report, feel free to contact the maintainer, you can see further details below. Opening Issues \u00b6 If you'd like to submit feature requests or open Issues, considering doing so on GitHub . Bug If you'd like to submit a bug report, make sure to include the version of Rust you're running, as well as your Operating System and Browser (if WASM is not working), and then open an issue on GitHub . Contact Details \u00b6 Email \u00b6 If you have any other questions which you'd like to ask the developer, you can send an email to: silviaodwyerdev [at] gmail dot com Spectrum Chat \u00b6 You can send a message to: @silvia-odwyer Alternatively, you can ask in Photon's Spectrum chatroom . Gitter \u00b6 You can also ask your questions, submit ideas, and more in our Gitter chat room .","title":"Contact"},{"location":"contact-developer/#contact-photons-developer","text":"","title":"Contact Photon's Developer"},{"location":"contact-developer/#got-a-question-feature-request-or-issue","text":"If you've got any questions, feature requests or bugs you'd like to report, feel free to contact the maintainer, you can see further details below.","title":"Got a question, feature request or issue?"},{"location":"contact-developer/#opening-issues","text":"If you'd like to submit feature requests or open Issues, considering doing so on GitHub . Bug If you'd like to submit a bug report, make sure to include the version of Rust you're running, as well as your Operating System and Browser (if WASM is not working), and then open an issue on GitHub .","title":"Opening Issues"},{"location":"contact-developer/#contact-details","text":"","title":"Contact Details"},{"location":"contact-developer/#email","text":"If you have any other questions which you'd like to ask the developer, you can send an email to: silviaodwyerdev [at] gmail dot com","title":"Email"},{"location":"contact-developer/#spectrum-chat","text":"You can send a message to: @silvia-odwyer Alternatively, you can ask in Photon's Spectrum chatroom .","title":"Spectrum Chat"},{"location":"contact-developer/#gitter","text":"You can also ask your questions, submit ideas, and more in our Gitter chat room .","title":"Gitter"},{"location":"contributing/","text":"Contributing \u00b6 Create your branch. Make your changes, for example, that could include improving documentation, adding new effects or filters, etc., Make sure it runs with cargo run --release If you are writing WebAssembly-specific code, and wish to build an npm module, install wasm-pack and then run: wasm-pack build . A package called pkg will be outputted, you can then use this in the webpack demo provided in the repository. Create a Pull Request, and I'll review it! :D Thanks so much for contributing!","title":"Contributing"},{"location":"contributing/#contributing","text":"Create your branch. Make your changes, for example, that could include improving documentation, adding new effects or filters, etc., Make sure it runs with cargo run --release If you are writing WebAssembly-specific code, and wish to build an npm module, install wasm-pack and then run: wasm-pack build . A package called pkg will be outputted, you can then use this in the webpack demo provided in the repository. Create a Pull Request, and I'll review it! :D Thanks so much for contributing!","title":"Contributing"},{"location":"getting-started/","text":"Getting Started \u00b6 Installing Photon \u00b6 Photon for the Web \u00b6 Photon is available as an npm module, which calls the underlying WebAssembly code. Ensuring you have Node.JS installed on your machine, install Photon's npm module : npm install @silvia-odwyer/photon You can use Photon as you would a standard JavaScript library, since it\u2019s available as an npm module, meaning you can use Photon for the browser, in Electron apps, with Vue, React, other JS frameworks, etc., Photon with NodeJS \u00b6 If you'd like to install Photon for use with NodeJS, install the relevant npm module : npm install @silvia-odwyer/photon-node Using Photon On the Web \u00b6 Check out our accompanying article on how to use Photon on the Web. Photon Natively \u00b6 If you\u2019d like to use Photon with a Rust project, you can install the photon-rs Cargo crate by adding the following line to your Cargo.toml dependencies: Cargo.toml \u00b6 [dependencies] photon_rs = \"0.0.1\" Using Photon Natively \u00b6 Once you've added Photon as a dependency, you can start using it, see this article for more","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installing-photon","text":"","title":"Installing Photon"},{"location":"getting-started/#photon-for-the-web","text":"Photon is available as an npm module, which calls the underlying WebAssembly code. Ensuring you have Node.JS installed on your machine, install Photon's npm module : npm install @silvia-odwyer/photon You can use Photon as you would a standard JavaScript library, since it\u2019s available as an npm module, meaning you can use Photon for the browser, in Electron apps, with Vue, React, other JS frameworks, etc.,","title":"Photon for the Web"},{"location":"getting-started/#photon-with-nodejs","text":"If you'd like to install Photon for use with NodeJS, install the relevant npm module : npm install @silvia-odwyer/photon-node","title":"Photon with NodeJS"},{"location":"getting-started/#using-photon-on-the-web","text":"Check out our accompanying article on how to use Photon on the Web.","title":"Using Photon On the Web"},{"location":"getting-started/#photon-natively","text":"If you\u2019d like to use Photon with a Rust project, you can install the photon-rs Cargo crate by adding the following line to your Cargo.toml dependencies:","title":"Photon Natively"},{"location":"getting-started/#cargotoml","text":"[dependencies] photon_rs = \"0.0.1\"","title":"Cargo.toml"},{"location":"getting-started/#using-photon-natively","text":"Once you've added Photon as a dependency, you can start using it, see this article for more","title":"Using Photon Natively"},{"location":"native-tutorial/","text":"Native Tutorial \u00b6 In this tutorial, we're going to write a program that resizes an image and applies a filter to it. You'll get a feel for how to use Photon, and will be able to build upon this to use Photon in your own projects. Getting Started \u00b6 Ensuring you have Rust installed, create a new Rust project: cargo new photon-demo --bin cd photon-demo Once you've moved into the new directory, take a look at the source files generated. Add Photon as A Dependency \u00b6 Add Photon as a dependency to your project: 1 2 [dependencies] photon_rs = \"0.1.0\" Your Cargo.toml should look like this: Cargo.toml \u00b6 1 2 3 4 5 6 7 8 9 10 [package] name = \"photon-demo\" version = \"0.1.0\" authors = [\"your_name <your_email>\"] edition = \"2018\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] photon = 1.2 Writing The Program \u00b6 Next up, open your bin.rs file. You'll find a sample function in there, remove that since we won't be using it. Open An Image \u00b6 To open an image: bin.rs \u00b6 1 2 3 4 5 6 extern crate photon_rs ; use photon_rs :: native :: { open_image }; fn main () { let mut img = open_image ( \"image.jpg\" ); } Apply a Filter Effect \u00b6 To apply a filter effect to the opened image, we need to pass in our image and a filter name. 1 photon_rs :: filters :: filter ( & mut img , \"twenties\" ); Notice that we're passing a mutable reference to the image. This allows the function to modify the image, rather than return a new image. There are a variety of filter effects we can pass. Once you get the program compiled, try passing in \"radio\" instead of the filter above. For a full list, see the documentation. Save To The Filesystem \u00b6 Then, to write the image to the filesystem: 1 save_image ( img , \"new_image.jpg\" ); Notice here we're saving it as a JPG image, but we could also save it as a PNG or a different output format, by including a different file extension. Get An Image \u00b6 Next up, you'll need an image to work with. You can use an image from your own collection, or try out the images available at Unsplash , which are also available in the Public Domain. Name it image.jpg , and save it in the same directory as your rust project. Final Program \u00b6 The final code looks like this: bin.rs \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extern crate photon_rs ; use photon_rs :: { filters }; use photon_rs :: native :: { open_image , save_image }; fn main () { // Open the image (a PhotonImage is returned) let mut img = open_image ( \"image.jpg\" ); // Apply a filter to the pixels filters :: filter ( & mut img , \"twenties\" ); // Write the new image to the filesystem. save_image ( img , \"new_image.jpg\" ); } Run The Code \u00b6 To run the program in release mode, run: cargo run --release Warning Make sure you run in release mode for optimum performance, by adding the --release flag to your command. Otherwise, performance will be greatly affected. Bonus: Add Timing \u00b6 If you'd like to find out how long it takes to process your image, you can add some code to capture this. Add the time dependency to your Cargo.toml: Cargo.toml \u00b6 [dependencies] time=\"0.2.1\" Then in your code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 extern crate photon_rs ; use photon_rs :: native :: { open_image , save_image }; use time :: { PreciseTime }; fn main () { // Open the image (a PhotonImage is returned) let mut img = open_image ( \"image.jpg\" ); // Start time let start = PreciseTime :: now (); // Process image photon_rs :: channels :: alter_channel ( & mut img , 1 , - 20 ); save_image ( img , \"raw_image.png\" ); // Output time taken. let end = PreciseTime :: now (); println ! ( \"Took {} seconds to process image.\" , start . to ( end )); } Want More Examples? \u00b6 To view more examples for native-use, check out the /examples folder in Photon's repository. You'll find full instructions on how to run these in the README. Working with the Web \u00b6 If you'd like to get started with Photon for the web, see the accompanying web tutorial .","title":"Native Tutorial"},{"location":"native-tutorial/#native-tutorial","text":"In this tutorial, we're going to write a program that resizes an image and applies a filter to it. You'll get a feel for how to use Photon, and will be able to build upon this to use Photon in your own projects.","title":"Native Tutorial"},{"location":"native-tutorial/#getting-started","text":"Ensuring you have Rust installed, create a new Rust project: cargo new photon-demo --bin cd photon-demo Once you've moved into the new directory, take a look at the source files generated.","title":"Getting Started"},{"location":"native-tutorial/#add-photon-as-a-dependency","text":"Add Photon as a dependency to your project: 1 2 [dependencies] photon_rs = \"0.1.0\" Your Cargo.toml should look like this:","title":"Add Photon as A Dependency"},{"location":"native-tutorial/#cargotoml","text":"1 2 3 4 5 6 7 8 9 10 [package] name = \"photon-demo\" version = \"0.1.0\" authors = [\"your_name <your_email>\"] edition = \"2018\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] photon = 1.2","title":"Cargo.toml"},{"location":"native-tutorial/#writing-the-program","text":"Next up, open your bin.rs file. You'll find a sample function in there, remove that since we won't be using it.","title":"Writing The Program"},{"location":"native-tutorial/#open-an-image","text":"To open an image:","title":"Open An Image"},{"location":"native-tutorial/#binrs","text":"1 2 3 4 5 6 extern crate photon_rs ; use photon_rs :: native :: { open_image }; fn main () { let mut img = open_image ( \"image.jpg\" ); }","title":"bin.rs"},{"location":"native-tutorial/#apply-a-filter-effect","text":"To apply a filter effect to the opened image, we need to pass in our image and a filter name. 1 photon_rs :: filters :: filter ( & mut img , \"twenties\" ); Notice that we're passing a mutable reference to the image. This allows the function to modify the image, rather than return a new image. There are a variety of filter effects we can pass. Once you get the program compiled, try passing in \"radio\" instead of the filter above. For a full list, see the documentation.","title":"Apply a Filter Effect"},{"location":"native-tutorial/#save-to-the-filesystem","text":"Then, to write the image to the filesystem: 1 save_image ( img , \"new_image.jpg\" ); Notice here we're saving it as a JPG image, but we could also save it as a PNG or a different output format, by including a different file extension.","title":"Save To The Filesystem"},{"location":"native-tutorial/#get-an-image","text":"Next up, you'll need an image to work with. You can use an image from your own collection, or try out the images available at Unsplash , which are also available in the Public Domain. Name it image.jpg , and save it in the same directory as your rust project.","title":"Get An Image"},{"location":"native-tutorial/#final-program","text":"The final code looks like this:","title":"Final Program"},{"location":"native-tutorial/#binrs_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extern crate photon_rs ; use photon_rs :: { filters }; use photon_rs :: native :: { open_image , save_image }; fn main () { // Open the image (a PhotonImage is returned) let mut img = open_image ( \"image.jpg\" ); // Apply a filter to the pixels filters :: filter ( & mut img , \"twenties\" ); // Write the new image to the filesystem. save_image ( img , \"new_image.jpg\" ); }","title":"bin.rs"},{"location":"native-tutorial/#run-the-code","text":"To run the program in release mode, run: cargo run --release Warning Make sure you run in release mode for optimum performance, by adding the --release flag to your command. Otherwise, performance will be greatly affected.","title":"Run The Code"},{"location":"native-tutorial/#bonus-add-timing","text":"If you'd like to find out how long it takes to process your image, you can add some code to capture this. Add the time dependency to your Cargo.toml:","title":"Bonus: Add Timing"},{"location":"native-tutorial/#cargotoml_1","text":"[dependencies] time=\"0.2.1\" Then in your code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 extern crate photon_rs ; use photon_rs :: native :: { open_image , save_image }; use time :: { PreciseTime }; fn main () { // Open the image (a PhotonImage is returned) let mut img = open_image ( \"image.jpg\" ); // Start time let start = PreciseTime :: now (); // Process image photon_rs :: channels :: alter_channel ( & mut img , 1 , - 20 ); save_image ( img , \"raw_image.png\" ); // Output time taken. let end = PreciseTime :: now (); println ! ( \"Took {} seconds to process image.\" , start . to ( end )); }","title":"Cargo.toml"},{"location":"native-tutorial/#want-more-examples","text":"To view more examples for native-use, check out the /examples folder in Photon's repository. You'll find full instructions on how to run these in the README.","title":"Want More Examples?"},{"location":"native-tutorial/#working-with-the-web","text":"If you'd like to get started with Photon for the web, see the accompanying web tutorial .","title":"Working with the Web"},{"location":"serialize-to-json/","text":"Serialize/Deserialize to JSON \u00b6 You can serialize and deserialize to and from JSON, if required. Here is a minimum example: Cargo.toml \u00b6 [package] authors = [\"Name <email>\"] name = \"serialize-example\" edition = \"2018\" [dependencies] photon = \"0.0.1\" serde = { version = \"1.0\", features = [\"derive\"] } serde_json = \"1.0\" bin.rs \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extern crate image ; extern crate photon ; use photon :: native :: { open_image , save_image }; use photon :: { Rgb , PhotonImage }; use serde :: { Serialize , Deserialize }; fn main () { let photon_image = PhotonImage :: new ( 134 , 145 ); let serialized = serde_json :: to_string ( & photon_image ). unwrap (); println ! ( \"serialized = {}\" , serialized ); let deserialized : PhotonImage = serde_json :: from_str ( & serialized ). unwrap (); println ! ( \"deserialized = {:?}\" , deserialized ); }","title":"Serialize to JSON"},{"location":"serialize-to-json/#serializedeserialize-to-json","text":"You can serialize and deserialize to and from JSON, if required. Here is a minimum example:","title":"Serialize/Deserialize to JSON"},{"location":"serialize-to-json/#cargotoml","text":"[package] authors = [\"Name <email>\"] name = \"serialize-example\" edition = \"2018\" [dependencies] photon = \"0.0.1\" serde = { version = \"1.0\", features = [\"derive\"] } serde_json = \"1.0\"","title":"Cargo.toml"},{"location":"serialize-to-json/#binrs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extern crate image ; extern crate photon ; use photon :: native :: { open_image , save_image }; use photon :: { Rgb , PhotonImage }; use serde :: { Serialize , Deserialize }; fn main () { let photon_image = PhotonImage :: new ( 134 , 145 ); let serialized = serde_json :: to_string ( & photon_image ). unwrap (); println ! ( \"serialized = {}\" , serialized ); let deserialized : PhotonImage = serde_json :: from_str ( & serialized ). unwrap (); println ! ( \"deserialized = {:?}\" , deserialized ); }","title":"bin.rs"},{"location":"specimen/","text":"Functions Available \u00b6 Channel/Color Manipulation \u00b6 Photon allows you to manipulate the channels or colors of your images, including: Swap image channels. Increase/decrease R, G, B channel values Remove channels Filters \u00b6 You can also choose from a selection of over 20 filters, as shown below. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum. Headings \u00b6 The 3rd level \u00b6 The 4th level \u00b6 The 5th level \u00b6 The 6th level \u00b6 Headings with secondary text \u00b6 The 3rd level with secondary text \u00b6 The 4th level with secondary text \u00b6 The 5th level with secondary text \u00b6 The 6th level with secondary text \u00b6 Blockquotes \u00b6 Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur. Blockquote nesting \u00b6 Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks \u00b6 Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. js hl_lines=\"8\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Praesent at :::js return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero. Lists \u00b6 Unordered lists \u00b6 Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Ordered lists \u00b6 Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget :::js var _extends ornare tellus, ut gravida mi. js hl_lines=\"1\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Definition lists \u00b6 Lorem ipsum dolor sit amet : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat , fermentum aliquet dui mollis . Nam vulputate tincidunt fringilla . Nullam dignissim ultrices urna non auctor . Cras arcu libero : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Code blocks \u00b6 Inline \u00b6 Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc :::js return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus. Listing \u00b6 1 2 3 4 5 6 7 8 9 var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Horizontal rules \u00b6 Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Photon vs Other Libraries \u00b6 Operation Photon Python Imaging Library ImageMagick arcu sed Flip horizontally 1.2s 34.4s - yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est. Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Specimen"},{"location":"specimen/#functions-available","text":"","title":"Functions Available"},{"location":"specimen/#channelcolor-manipulation","text":"Photon allows you to manipulate the channels or colors of your images, including: Swap image channels. Increase/decrease R, G, B channel values Remove channels","title":"Channel/Color Manipulation"},{"location":"specimen/#filters","text":"You can also choose from a selection of over 20 filters, as shown below. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum.","title":"Filters"},{"location":"specimen/#headings","text":"","title":"Headings"},{"location":"specimen/#the-3rd-level","text":"","title":"The 3rd level"},{"location":"specimen/#the-4th-level","text":"","title":"The 4th level"},{"location":"specimen/#the-5th-level","text":"","title":"The 5th level"},{"location":"specimen/#the-6th-level","text":"","title":"The 6th level"},{"location":"specimen/#headings-with-secondary-text","text":"","title":"Headings with secondary text"},{"location":"specimen/#the-3rd-level-with-secondary-text","text":"","title":"The 3rd level with secondary text"},{"location":"specimen/#the-4th-level-with-secondary-text","text":"","title":"The 4th level with secondary text"},{"location":"specimen/#the-5th-level-with-secondary-text","text":"","title":"The 5th level with secondary text"},{"location":"specimen/#the-6th-level-with-secondary-text","text":"","title":"The 6th level with secondary text"},{"location":"specimen/#blockquotes","text":"Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur.","title":"Blockquotes"},{"location":"specimen/#blockquote-nesting","text":"Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa.","title":"Blockquote nesting"},{"location":"specimen/#other-content-blocks","text":"Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. js hl_lines=\"8\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Praesent at :::js return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero.","title":"Other content blocks"},{"location":"specimen/#lists","text":"","title":"Lists"},{"location":"specimen/#unordered-lists","text":"Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam.","title":"Unordered lists"},{"location":"specimen/#ordered-lists","text":"Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget :::js var _extends ornare tellus, ut gravida mi. js hl_lines=\"1\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo.","title":"Ordered lists"},{"location":"specimen/#definition-lists","text":"Lorem ipsum dolor sit amet : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat , fermentum aliquet dui mollis . Nam vulputate tincidunt fringilla . Nullam dignissim ultrices urna non auctor . Cras arcu libero : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris.","title":"Definition lists"},{"location":"specimen/#code-blocks","text":"","title":"Code blocks"},{"location":"specimen/#inline","text":"Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc :::js return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.","title":"Inline"},{"location":"specimen/#listing","text":"1 2 3 4 5 6 7 8 9 var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; };","title":"Listing"},{"location":"specimen/#horizontal-rules","text":"Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.","title":"Horizontal rules"},{"location":"specimen/#photon-vs-other-libraries","text":"Operation Photon Python Imaging Library ImageMagick arcu sed Flip horizontally 1.2s 34.4s - yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Photon vs Other Libraries"},{"location":"specimen/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"specimen/#project-layout","text":"mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Project layout"},{"location":"using-photon-natively/","text":"Using Photon Natively \u00b6 Prerequisites \u00b6 Add Photon as a dependency to your project's Cargo.toml: Cargo.toml \u00b6 photon-rs = \"0.1.0\" Open an Image \u00b6 To open an image: bin.rs \u00b6 1 2 3 4 5 extern crate photon_rs ; use photon_rs :: native :: { open_image }; fn main () { let mut img = open_image ( \"image.jpg\" ); } Process The Image \u00b6 To apply a filter effect to the opened image, we need to pass in our image and a filter name. 1 photon_rs :: filters :: filter ( & mut img , \"twenties\" ); Notice that we're passing a mutable reference to the image. This allows the function to modify the image, rather than return a new image. There are a variety of filter effects we can pass. Once you get the program compiled, try passing in \"radio\" instead of the filter above. For a full list, see the documentation . Write to the Filesystem \u00b6 Then, to write the image to the filesystem: 1 save_image ( img , \"new_image.jpg\" ); Notice here we're saving it as a JPG image, but we could also save it as a PNG or a different output format, by including a different file extension. Sample Program \u00b6 This program adds a sepia effect to an image: 1 2 3 4 5 6 7 8 9 10 11 12 13 extern crate photon_rs ; use photon_rs :: { monochrome }; use photon_rs :: native :: { open_image , save_image }; fn main () { // Open the image (a PhotonImage is returned) let mut img = open_image ( \"image.jpg\" ); // Apply a sepia effect to the image. monochrome :: sepia ( & mut img ); save_image ( img , \"raw_image.png\" ); }","title":"Using Photon Natively"},{"location":"using-photon-natively/#using-photon-natively","text":"","title":"Using Photon Natively"},{"location":"using-photon-natively/#prerequisites","text":"Add Photon as a dependency to your project's Cargo.toml:","title":"Prerequisites"},{"location":"using-photon-natively/#cargotoml","text":"photon-rs = \"0.1.0\"","title":"Cargo.toml"},{"location":"using-photon-natively/#open-an-image","text":"To open an image:","title":"Open an Image"},{"location":"using-photon-natively/#binrs","text":"1 2 3 4 5 extern crate photon_rs ; use photon_rs :: native :: { open_image }; fn main () { let mut img = open_image ( \"image.jpg\" ); }","title":"bin.rs"},{"location":"using-photon-natively/#process-the-image","text":"To apply a filter effect to the opened image, we need to pass in our image and a filter name. 1 photon_rs :: filters :: filter ( & mut img , \"twenties\" ); Notice that we're passing a mutable reference to the image. This allows the function to modify the image, rather than return a new image. There are a variety of filter effects we can pass. Once you get the program compiled, try passing in \"radio\" instead of the filter above. For a full list, see the documentation .","title":"Process The Image"},{"location":"using-photon-natively/#write-to-the-filesystem","text":"Then, to write the image to the filesystem: 1 save_image ( img , \"new_image.jpg\" ); Notice here we're saving it as a JPG image, but we could also save it as a PNG or a different output format, by including a different file extension.","title":"Write to the Filesystem"},{"location":"using-photon-natively/#sample-program","text":"This program adds a sepia effect to an image: 1 2 3 4 5 6 7 8 9 10 11 12 13 extern crate photon_rs ; use photon_rs :: { monochrome }; use photon_rs :: native :: { open_image , save_image }; fn main () { // Open the image (a PhotonImage is returned) let mut img = open_image ( \"image.jpg\" ); // Apply a sepia effect to the image. monochrome :: sepia ( & mut img ); save_image ( img , \"raw_image.png\" ); }","title":"Sample Program"},{"location":"using-photon-web/","text":"Using Photon on the Web \u00b6 Installing Photon \u00b6 Prerequisites \u00b6 Install via npm: npm install @silvia-odwyer/photon Importing \u00b6 import ( \"@silvia-odwyer/photon\" ). then ( photon => { // Module has now been imported. // All image processing logic w/ Photon goes here. // See sample code below. } Usage \u00b6 Working with Photon involves the use of the HTML5 Canvas element, so you'll need to create a canvas and draw your desired image onto the canvas. You can then convert this canvas to a PhotonImage, and apply effects to it. See the sample code below. Sample Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function filterImage () { // Create a canvas and get a 2D context from the canvas var canvas = document . getElementById ( \"canvas\" ); var ctx = canvas . getContext ( \"2d\" ); // Draw the image element onto the canvas ctx . drawImage ( newimg , 0 , 0 ); // Convert the ImageData found in the canvas to a PhotonImage (so that it can communicate with the core Rust library) let image = photon . open_image ( canvas , ctx ); // Filter the image, the PhotonImage's raw pixels are modified photon . filter ( image , \"radio\" ); // Place the modified image back on the canvas photon . putImageData ( canvas , ctx , rust_image ); } Apply Multiple Effects \u00b6 To apply multiple effects to a single image, you can pass the same image into consecutive calls. For example, to add a \"radio\" filter effect, then convert to greyscale, and finally increment the Red channel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function filterImage () { // Create a canvas and get a 2D context from the canvas var canvas = document . getElementById ( \"canvas\" ); var ctx = canvas . getContext ( \"2d\" ); // Draw the image element onto the canvas ctx . drawImage ( newimg , 0 , 0 ); // Convert the ImageData found in the canvas to a PhotonImage (so that it can communicate with the core Rust library) let image = photon . open_image ( canvas , ctx ); // Filter the image, the PhotonImage's raw pixels are modified photon . filter ( image , \"radio\" ); photon . grayscale ( image ); photon . alter_red_channel ( image , 20 ); // Place the pixels back on the canvas photon . putImageData ( canvas , ctx , rust_image ); }","title":"Using Photon on The Web"},{"location":"using-photon-web/#using-photon-on-the-web","text":"","title":"Using Photon on the Web"},{"location":"using-photon-web/#installing-photon","text":"","title":"Installing Photon"},{"location":"using-photon-web/#prerequisites","text":"Install via npm: npm install @silvia-odwyer/photon","title":"Prerequisites"},{"location":"using-photon-web/#importing","text":"import ( \"@silvia-odwyer/photon\" ). then ( photon => { // Module has now been imported. // All image processing logic w/ Photon goes here. // See sample code below. }","title":"Importing"},{"location":"using-photon-web/#usage","text":"Working with Photon involves the use of the HTML5 Canvas element, so you'll need to create a canvas and draw your desired image onto the canvas. You can then convert this canvas to a PhotonImage, and apply effects to it. See the sample code below.","title":"Usage"},{"location":"using-photon-web/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function filterImage () { // Create a canvas and get a 2D context from the canvas var canvas = document . getElementById ( \"canvas\" ); var ctx = canvas . getContext ( \"2d\" ); // Draw the image element onto the canvas ctx . drawImage ( newimg , 0 , 0 ); // Convert the ImageData found in the canvas to a PhotonImage (so that it can communicate with the core Rust library) let image = photon . open_image ( canvas , ctx ); // Filter the image, the PhotonImage's raw pixels are modified photon . filter ( image , \"radio\" ); // Place the modified image back on the canvas photon . putImageData ( canvas , ctx , rust_image ); }","title":"Sample Code"},{"location":"using-photon-web/#apply-multiple-effects","text":"To apply multiple effects to a single image, you can pass the same image into consecutive calls. For example, to add a \"radio\" filter effect, then convert to greyscale, and finally increment the Red channel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function filterImage () { // Create a canvas and get a 2D context from the canvas var canvas = document . getElementById ( \"canvas\" ); var ctx = canvas . getContext ( \"2d\" ); // Draw the image element onto the canvas ctx . drawImage ( newimg , 0 , 0 ); // Convert the ImageData found in the canvas to a PhotonImage (so that it can communicate with the core Rust library) let image = photon . open_image ( canvas , ctx ); // Filter the image, the PhotonImage's raw pixels are modified photon . filter ( image , \"radio\" ); photon . grayscale ( image ); photon . alter_red_channel ( image , 20 ); // Place the pixels back on the canvas photon . putImageData ( canvas , ctx , rust_image ); }","title":"Apply Multiple Effects"},{"location":"web-tutorial/","text":"Web Tutorial \u00b6 Coming soon! Stay tuned!","title":"Web Tutorial"},{"location":"web-tutorial/#web-tutorial","text":"Coming soon! Stay tuned!","title":"Web Tutorial"}]}