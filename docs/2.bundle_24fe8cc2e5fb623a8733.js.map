{"version":3,"sources":["webpack:///../crate/pkg/photon_rs.js","webpack:///./node_modules/util/util.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/node-libs-browser/node_modules/process/browser.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/inherits/inherits_browser.js"],"names":["heap","Array","getObject","idx","fill","undefined","push","heap_next","length","takeObject","ret","dropObject","_assertBoolean","n","Error","addHeapObject","obj","WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","cachedTextEncoder","TextEncoder","require","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","_assertClass","instance","klass","name","_assertNum","monochrome","img","r_offset","g_offset","b_offset","PhotonImage","sepia","grayscale","grayscale_human_corrected","photon_image","desaturate","decompose_min","decompose_max","grayscale_shades","num_shades","r_grayscale","g_grayscale","b_grayscale","single_channel_grayscale","channel","threshold","passArray8ToWasm0","getArrayU8FromWasm0","run","stack_pointer","addBorrowedObject","get_image_data","canvas","ctx","putImageData","new_image","ptr0","open_image","__wrap","to_raw_pixels","imgdata","r0","r1","v0","base64_to_image","base64","len0","base64_to_vec","v1","to_image_data","fliph","flipv","resizeimg_browser","photon_img","width","height","sampling_filter","noise_reduction","sharpen","edge_detection","identity","box_blur","gaussian_blur","radius","detect_horizontal_lines","detect_vertical_lines","detect_45_deg_lines","detect_135_deg_lines","laplace","edge_one","emboss","sobel_horizontal","prewitt_horizontal","sobel_vertical","lch","mode","amt","hsl","hsv","hue_rotate_hsl","degrees","hue_rotate_hsv","hue_rotate_lch","saturate_hsl","level","saturate_lch","saturate_hsv","lighten_lch","lighten_hsl","lighten_hsv","darken_lch","darken_hsl","darken_hsv","desaturate_hsv","desaturate_hsl","desaturate_lch","mix_with_colour","mix_colour","opacity","Rgb","channel_index","offset_red","offset_amt","offset_green","offset_blue","multiple_offsets","channel_index2","primary","colorize","solarize","solarize_retimg","inc_brightness","brightness","adjust_contrast","contrast","tint","horizontal_strips","num_strips","vertical_strips","alter_channel","alter_red_channel","alter_green_channel","alter_blue_channel","alter_two_channels","channel1","amt1","channel2","amt2","alter_channels","r_amt","g_amt","b_amt","remove_channel","min_filter","remove_red_channel","remove_green_channel","remove_blue_channel","swap_channels","selective_hue_rotate","ref_color","invert","selective_lighten","selective_desaturate","selective_saturate","selective_greyscale","ptr1","neue","lix","ryo","filter","filter_name","lofi","pastel_pink","golden","cali","dramatic","firenze","obsidian","watermark","x","y","blend","photon_image2","blend_mode","create_gradient","apply_gradient","image","draw_text_with_border","text","draw_text","logError","e","error","message","stack","toString","_","console","handleError","isLikeNone","cachegetUint8ClampedMemory0","getClampedArrayU8FromWasm0","Uint8ClampedArray","SamplingFilter","Object","freeze","Nearest","Triangle","CatmullRom","Gaussian","Lanczos3","raw_pixels","this","create","prototype","img_data","vec","r","g","b","__wbindgen_object_drop_ref","arg0","__wbg_error_4bb6c2a97407129a","arg1","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__widl_instanceof_CanvasRenderingContext2D","CanvasRenderingContext2D","__widl_f_get_image_data_CanvasRenderingContext2D","arg2","arg3","arg4","getImageData","__widl_f_put_image_data_CanvasRenderingContext2D","__widl_f_create_element_Document","createElement","__widl_f_body_Document","body","__widl_instanceof_HTMLCanvasElement","HTMLCanvasElement","__widl_f_get_context_HTMLCanvasElement","getContext","__widl_f_width_HTMLCanvasElement","__widl_f_set_width_HTMLCanvasElement","__widl_f_height_HTMLCanvasElement","__widl_f_set_height_HTMLCanvasElement","__widl_f_new_with_u8_clamped_array_and_sh_ImageData","ImageData","__widl_f_width_ImageData","__widl_f_height_ImageData","__widl_f_data_ImageData","data","__widl_f_append_child_Node","appendChild","__widl_f_set_text_content_Node","textContent","__widl_instanceof_Window","Window","__widl_f_document_Window","document","__wbg_newnoargs_c4b2cbbd30e2d057","Function","__wbg_call_12b949cfc461d154","call","__wbg_globalThis_22e06d4bea0084e3","globalThis","__wbg_self_00b0599bca667294","self","__wbg_window_aa795c5aad79b8ac","window","__wbg_global_cc239dc2303f417c","global","__wbindgen_is_undefined","__wbindgen_object_clone_ref","__wbindgen_debug_string","debugString","val","type","description","isArray","debug","i","className","builtInMatches","exec","JSON","stringify","__wbindgen_throw","__wbindgen_rethrow","getOwnPropertyDescriptors","keys","descriptors","getOwnPropertyDescriptor","formatRegExp","exports","format","f","isString","objects","arguments","inspect","join","args","str","String","replace","Number","isNull","isObject","deprecate","fn","msg","process","noDeprecation","apply","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","value","recurseTimes","isFunction","constructor","primitive","simple","isNumber","formatPrimitive","visibleKeys","array","hash","forEach","arrayToHash","getOwnPropertyNames","isError","indexOf","formatError","isRegExp","RegExp","isDate","Date","output","base","braces","toUTCString","l","hasOwnProperty","formatProperty","key","match","formatArray","map","pop","reduce","prev","cur","numLinesEst","reduceToSingleString","desc","get","split","line","substr","ar","re","objectToString","d","o","pad","debuglog","env","NODE_DEBUG","toUpperCase","test","pid","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","prop","log","inherits","origin","add","kCustomPromisifiedSymbol","Symbol","callbackifyOnRejected","reason","cb","newReason","promisify","original","TypeError","defineProperty","enumerable","writable","configurable","promiseResolve","promiseReject","promise","Promise","resolve","reject","err","setPrototypeOf","getPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","then","nextTick","rej","module","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","marker","runClearTimeout","Item","noop","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","copy","readUInt8","ctor","superCtor","super_","TempCtor"],"mappings":"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","file":"2.bundle_24fe8cc2e5fb623a8733.js","sourcesContent":["import * as wasm from './photon_rs_bg.wasm';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction _assertBoolean(n) {\n    if (typeof(n) !== 'boolean') {\n        throw new Error('expected a boolean argument');\n    }\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    if (typeof(heap_next) !== 'number') throw new Error('corrupt heap');\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? require('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        if (ret.read !== arg.length) throw new Error('failed to pass whole string');\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? require('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction _assertNum(n) {\n    if (typeof(n) !== 'number') throw new Error('expected a number argument');\n}\n/**\n* Apply a monochrome effect of a certain colour.\n*\n* It does so by averaging the R, G, and B values of a pixel, and then adding a\n* separate value to that averaged value for each channel to produce a tint.\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `r_offset` - The value to add to the Red channel per pixel.\n* * `g_offset` - The value to add to the Green channel per pixel.\n* * `b_offset` - The value to add to the Blue channel per pixel.\n*\n* # Example\n*\n* ```\n* // For example, to apply a monochrome effect to an image:\n* use photon::monochrome;\n* monochrome::monochroma(&mut img, 40, 50, 100);\n* ```\n*\n* @param {PhotonImage} img\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n*/\nexport function monochrome(img, r_offset, g_offset, b_offset) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(r_offset);\n    _assertNum(g_offset);\n    _assertNum(b_offset);\n    wasm.monochrome(img.ptr, r_offset, g_offset, b_offset);\n}\n\n/**\n* Convert an image to sepia.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* use photon::monochrome;\n* monochrome::sepia(&mut img);\n* ```\n*\n* @param {PhotonImage} img\n*/\nexport function sepia(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.sepia(img.ptr);\n}\n\n/**\n* Convert an image to grayscale using the conventional averaging algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to greyscale:\n* use photon::monochrome;\n* monochrome::grayscale(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function grayscale(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.grayscale(img.ptr);\n}\n\n/**\n* Convert an image to grayscale with a human corrected factor, to account for human vision.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to greyscale with a human corrected factor:\n* use photon::monochrome;\n* monochrome::grayscale_human_corrected(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function grayscale_human_corrected(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.grayscale_human_corrected(photon_image.ptr);\n}\n\n/**\n* Desaturate an image by getting the min/max of each pixel\\'s RGB values.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to desaturate an image:\n* use photon::monochrome;\n* monochrome::desaturate(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function desaturate(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.desaturate(photon_image.ptr);\n}\n\n/**\n* Uses a min. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with min decomposition:\n* monochrome::decompose_min(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function decompose_min(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.decompose_min(photon_image.ptr);\n}\n\n/**\n* Uses a max. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with max decomposition:\n* monochrome::decompose_max(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function decompose_max(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.decompose_max(photon_image.ptr);\n}\n\n/**\n* Employ only a limited number of gray shades in an image.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `num_shades` - The number of grayscale shades to be displayed in the image.\n* # Example\n*\n* ```\n* // For example, to limit an image to four shades of gray only:\n* monochrome::grayscale_shades(&mut img, 4);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_shades\n*/\nexport function grayscale_shades(photon_image, num_shades) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(num_shades);\n    wasm.grayscale_shades(photon_image.ptr, num_shades);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Red channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::r_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function r_grayscale(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.r_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Green channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::g_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function g_grayscale(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.g_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Blue channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::b_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function b_grayscale(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.b_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to a chosen channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `channel` - A usize representing the channel from 0 to 2. O represents the Red channel, 1 the Green channel, and 2 the Blue channel.\n* # Example\n* To grayscale using only values from the Red channel:\n* ```\n* monochrome::single_channel_grayscale(&mut img, 0);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel\n*/\nexport function single_channel_grayscale(photon_image, channel) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(channel);\n    wasm.single_channel_grayscale(photon_image.ptr, channel);\n}\n\n/**\n* Threshold an image using a standard thresholding algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `threshold` - The amount the image should be thresholded by from 0 to 255.\n* # Example\n*\n* ```\n* // For example, to threshold an image of type `PhotonImage`:\n* use photon::monochrome;\n* monochrome::threshold(&mut img, 30);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} threshold\n*/\nexport function threshold(photon_image, threshold) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(threshold);\n    wasm.threshold(photon_image.ptr, threshold);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* [temp] Check if WASM is supported.\n*/\nexport function run() {\n    wasm.run();\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* Get the ImageData from a 2D canvas context\n* @param {any} canvas\n* @param {any} ctx\n* @returns {any}\n*/\nexport function get_image_data(canvas, ctx) {\n    try {\n        var ret = wasm.get_image_data(addBorrowedObject(canvas), addBorrowedObject(ctx));\n        return takeObject(ret);\n    } finally {\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Place a PhotonImage onto a 2D canvas.\n* @param {any} canvas\n* @param {any} ctx\n* @param {PhotonImage} new_image\n*/\nexport function putImageData(canvas, ctx, new_image) {\n    _assertClass(new_image, PhotonImage);\n    if (new_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = new_image.ptr;\n    new_image.ptr = 0;\n    wasm.putImageData(addHeapObject(canvas), addHeapObject(ctx), ptr0);\n}\n\n/**\n* Convert a HTML5 Canvas Element to a PhotonImage.\n*\n* This converts the ImageData found in the canvas context to a PhotonImage,\n* which can then have effects or filters applied to it.\n* @param {any} canvas\n* @param {any} ctx\n* @returns {PhotonImage}\n*/\nexport function open_image(canvas, ctx) {\n    var ret = wasm.open_image(addHeapObject(canvas), addHeapObject(ctx));\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Convert ImageData to a raw pixel vec of u8s.\n* @param {any} imgdata\n* @returns {Uint8Array}\n*/\nexport function to_raw_pixels(imgdata) {\n    wasm.to_raw_pixels(8, addHeapObject(imgdata));\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v0;\n}\n\n/**\n* Convert a base64 string to a PhotonImage.\n* @param {string} base64\n* @returns {PhotonImage}\n*/\nexport function base64_to_image(base64) {\n    var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.base64_to_image(ptr0, len0);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Convert a base64 string to a Vec of u8s.\n* @param {string} base64\n* @returns {Uint8Array}\n*/\nexport function base64_to_vec(base64) {\n    var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.base64_to_vec(8, ptr0, len0);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v1 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v1;\n}\n\n/**\n* Convert a PhotonImage to JS-compatible ImageData.\n* @param {PhotonImage} photon_image\n* @returns {any}\n*/\nexport function to_image_data(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    var ret = wasm.to_image_data(ptr0);\n    return takeObject(ret);\n}\n\n/**\n* Flip an image horizontally.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to flip an image horizontally:\n* use photon::transform;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* let new_img = photon::transform::fliph(&mut img);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(new_img, \\\"new_image.png\\\");\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function fliph(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.fliph(photon_image.ptr);\n}\n\n/**\n* Flip an image vertically.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to flip an image vertically:\n* use photon::transform;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* let new_img = photon::transform::flipv(&mut img);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(new_img, \\\"new_image.png\\\");\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function flipv(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.flipv(photon_image.ptr);\n}\n\n/**\n* Resize an image on the web.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n* * `sampling_filter` - Nearest = 1, Triangle = 2, CatmullRom = 3, Gaussian = 4, Lanczos3 = 5\n* @param {PhotonImage} photon_img\n* @param {number} width\n* @param {number} height\n* @param {number} sampling_filter\n* @returns {any}\n*/\nexport function resizeimg_browser(photon_img, width, height, sampling_filter) {\n    _assertClass(photon_img, PhotonImage);\n    if (photon_img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(width);\n    _assertNum(height);\n    _assertNum(sampling_filter);\n    var ret = wasm.resizeimg_browser(photon_img.ptr, width, height, sampling_filter);\n    return takeObject(ret);\n}\n\n/**\n* Noise reduction.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon::conv::sharpen;\n* photon::channels::sharpen(img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n*/\nexport function noise_reduction(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.noise_reduction(photon_image.ptr);\n}\n\n/**\n* Sharpen an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon::conv::sharpen;\n* photon::channels::sharpen(img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n*/\nexport function sharpen(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.sharpen(photon_image.ptr);\n}\n\n/**\n* Apply edge detection to an image, to create a dark version with its edges highlighted.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* photon::conv::edge_detection(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function edge_detection(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.edge_detection(photon_image.ptr);\n}\n\n/**\n* Apply an identity kernel convolution to an image.\n*\n* # Arguments\n* * `img` -A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply an identity kernel convolution:\n* use photon::channels;\n* photon::conv::identity(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function identity(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.identity(photon_image.ptr);\n}\n\n/**\n* Apply a box blur effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a box blur effect:\n* use photon::channels;\n* photon::conv::box_blur(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function box_blur(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.box_blur(photon_image.ptr);\n}\n\n/**\n* Gaussian blur in linear time.\n*\n* Reference: http://blog.ivank.net/fastest-gaussian-blur.html\n*\n* # Arguments\n* * `photon_image` - A PhotonImage\n* * `radius` - blur radius\n* # Example\n*\n* ```\n* photon::conv:fast_gaussian_blur(photon_image, 3);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} radius\n*/\nexport function gaussian_blur(photon_image, radius) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(radius);\n    wasm.gaussian_blur(photon_image.ptr, radius);\n}\n\n/**\n* Detect horizontal lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the horizontal lines in an image:\n* use photon::channels;\n* photon::conv::detect_horizontal_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_horizontal_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.detect_horizontal_lines(photon_image.ptr);\n}\n\n/**\n* Detect vertical lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the vertical lines in an image:\n* use photon::channels;\n* photon::conv::detect_vertical_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_vertical_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.detect_vertical_lines(photon_image.ptr);\n}\n\n/**\n* Detect lines at a forty five degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a forty five degree angle in an image:\n* use photon::channels;\n* photon::conv::detect_fortyfivedeg_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_45_deg_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.detect_45_deg_lines(photon_image.ptr);\n}\n\n/**\n* Detect lines at a 135 degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a 135 degree angle in an image:\n* use photon::channels;\n* photon::conv::detect_hundredthirtyfive_deg_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_135_deg_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.detect_135_deg_lines(photon_image.ptr);\n}\n\n/**\n* Apply a standard laplace convolution.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a laplace effect:\n* use photon::conv;\n* photon::conv::laplace(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function laplace(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.laplace(photon_image.ptr);\n}\n\n/**\n* Preset edge effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply this effect:\n* use photon::conv;\n* photon::conv::edge_one(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function edge_one(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.edge_one(photon_image.ptr);\n}\n\n/**\n* Apply an emboss effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply an emboss effect:\n* use photon::conv;\n* photon::conv::emboss(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function emboss(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.emboss(photon_image.ptr);\n}\n\n/**\n* Apply a horizontal Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Sobel filter:\n* use photon::conv;\n* photon::conv::sobel_horizontal(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function sobel_horizontal(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.sobel_horizontal(photon_image.ptr);\n}\n\n/**\n* Apply a horizontal Prewitt convolution to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Prewitt convolution effect:\n* use photon::conv;\n* photon::conv::prewitt_horizontal(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function prewitt_horizontal(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.prewitt_horizontal(photon_image.ptr);\n}\n\n/**\n* Apply a vertical Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a vertical Sobel filter:\n* use photon::conv;\n* photon::conv::sobel_vertical(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function sobel_vertical(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.sobel_vertical(photon_image.ptr);\n}\n\n/**\n* Apply gamma correction.\n* Image manipulation effects in the LCh colour space\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lch(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nexport function lch(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.lch(photon_image.ptr, ptr0, len0, amt);\n}\n\n/**\n* Image manipulation effects in the HSL colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hsl(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nexport function hsl(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsl(photon_image.ptr, ptr0, len0, amt);\n}\n\n/**\n* Image manipulation in the HSV colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n*\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hsv(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nexport function hsv(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsv(photon_image.ptr, ptr0, len0, amt);\n}\n\n/**\n* Shift hue by a specified number of degrees in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon::color_spaces::hue_rotate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_hsl(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nexport function hue_rotate_hsl(img, degrees) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.hue_rotate_hsl(img.ptr, degrees);\n}\n\n/**\n* Shift hue by a specified number of degrees in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSV colour space:\n* use photon::color_spaces::hue_rotate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_hsv(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nexport function hue_rotate_hsv(img, degrees) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.hue_rotate_hsv(img.ptr, degrees);\n}\n\n/**\n* Shift hue by a specified number of degrees in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon::color_spaces::hue_rotate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_lch(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nexport function hue_rotate_lch(img, degrees) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.hue_rotate_lch(img.ptr, degrees);\n}\n\n/**\n* Increase the image\\'s saturation by converting each pixel\\'s colour to the HSL colour space\n* and increasing the colour\\'s saturation.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 10% in the HSL colour space:\n* use photon::color_spaces::saturate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function saturate_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.saturate_hsl(img.ptr, level);\n}\n\n/**\n* Increase the image\\'s saturation in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 40% in the Lch colour space:\n* use photon::color_spaces::saturate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_lch(&mut img, 0.4);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function saturate_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.saturate_lch(img.ptr, level);\n}\n\n/**\n* Increase the image\\'s saturation in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level by which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 30% in the HSV colour space:\n* use photon::color_spaces::saturate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_hsv(&mut img, 0.3);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function saturate_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.saturate_hsv(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the LCh colour space:\n* use photon::color_spaces::lighten_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function lighten_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.lighten_lch(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSL colour space:\n* use photon::color_spaces::lighten_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function lighten_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.lighten_hsl(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSV colour space:\n* use photon::color_spaces::lighten_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function lighten_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.lighten_hsv(img.ptr, level);\n}\n\n/**\n* Darken the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the LCh colour space:\n* use photon::color_spaces::darken_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function darken_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.darken_lch(img.ptr, level);\n}\n\n/**\n* Darken the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSL colour space:\n* use photon::color_spaces::darken_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function darken_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.darken_hsl(img.ptr, level);\n}\n\n/**\n* Darken the image\\'s colours by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSV colour space:\n* use photon::color_spaces::darken_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function darken_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.darken_hsv(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the HSV colour space:\n* use photon::color_spaces::desaturate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/mountains.PNG\\\");\n*\n* desaturate_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function desaturate_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.desaturate_hsv(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon::color_spaces::desaturate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* desaturate_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function desaturate_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.desaturate_hsl(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon::color_spaces::desaturate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* desaturate_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function desaturate_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.desaturate_lch(img.ptr, level);\n}\n\n/**\n* Mix image with a single color, supporting passing `opacity`.\n* The algorithm comes from Jimp. See `function mix` and `function colorFn` at following link:\n* https://github.com/oliver-moran/jimp/blob/29679faa597228ff2f20d34c5758e4d2257065a3/packages/plugin-color/src/index.js\n* Specifically, result_value = (mix_color_value - origin_value) * opacity + origin_value =\n* mix_color_value * opacity + (1 - opacity) * origin_value for each\n* of RGB channel.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `mix_color` - the color to be mixed in, as an RGB value.\n* * `opacity` - the opacity of color when mixed to image. Float value from 0 to 1.\n* # Example\n*\n* ```\n* // For example, to mix an image with rgb (50, 255, 254) and opacity 0.4:\n* use photon::colour_spaces::mix_with_colour;\n*\n* let mix_colour = Rgb{50, 255, 254};\n* mix_with_colour(photon_image, mix_colour, 0.4);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} mix_colour\n* @param {number} opacity\n*/\nexport function mix_with_colour(photon_image, mix_colour, opacity) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(mix_colour, Rgb);\n    if (mix_colour.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = mix_colour.ptr;\n    mix_colour.ptr = 0;\n    wasm.mix_with_colour(photon_image.ptr, ptr0, opacity);\n}\n\n/**\n* Adds an offset to the image by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to offset pixels by 30 pixels on the red channel:\n* use photon::effects;\n* photon::effects::offset(img, 0, 30);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel_index\n* @param {number} offset\n*/\nexport function offset(photon_image, channel_index, offset) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(channel_index);\n    _assertNum(offset);\n    wasm.offset(photon_image.ptr, channel_index, offset);\n}\n\n/**\n* Adds an offset to the red channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the red channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the red channel by 30 pixels.\n* use photon::effects;\n* photon::effects::offset_red(img, 30);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nexport function offset_red(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(offset_amt);\n    wasm.offset_red(img.ptr, offset_amt);\n}\n\n/**\n* Adds an offset to the green channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the green channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the green channel by 30 pixels.\n* use photon::effects;\n* photon::effects::offset_green(img, 40);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nexport function offset_green(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(offset_amt);\n    wasm.offset_green(img.ptr, offset_amt);\n}\n\n/**\n* Adds an offset to the blue channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset_amt` - The offset you want to move the blue channel by.\n* # Example\n* // For example, to add an offset to the green channel by 40 pixels.\n*\n* ```\n* use photon::effects;\n* photon::effects::offset_blue(img, 40);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nexport function offset_blue(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(offset_amt);\n    wasm.offset_blue(img.ptr, offset_amt);\n}\n\n/**\n* Adds multiple offsets to the image by a certain number of pixels (on two channels).\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to add a 30-pixel offset to both the red and blue channels:\n* use photon::effects;\n* photon::effects::multiple_offsets(img, 30, 0, 2);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} offset\n* @param {number} channel_index\n* @param {number} channel_index2\n*/\nexport function multiple_offsets(photon_image, offset, channel_index, channel_index2) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(offset);\n    _assertNum(channel_index);\n    _assertNum(channel_index2);\n    wasm.multiple_offsets(photon_image.ptr, offset, channel_index, channel_index2);\n}\n\n/**\n* Reduces an image to the primary colours.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to add a primary colour effect to an image of type `DynamicImage`:\n* use photon::effects;\n* photon::effects::primary(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function primary(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.primary(photon_image.ptr);\n}\n\n/**\n* Colorizes the green channels of the image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon::effects;\n* photon::effects::colorize(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function colorize(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.colorize(photon_image.ptr);\n}\n\n/**\n* Applies a solarizing effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon::effects;\n* photon::effects::solarize(img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function solarize(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.solarize(photon_image.ptr);\n}\n\n/**\n* Applies a solarizing effect to an image and returns the resulting PhotonImage.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to solarize an image of type `PhotonImage`:\n* use photon::effects;\n* let img = photon::effects::solarize(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {PhotonImage}\n*/\nexport function solarize_retimg(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ret = wasm.solarize_retimg(photon_image.ptr);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Increase the brightness of an image by a factor.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `brightness` - A u8 to add to the brightness.\n* # Example\n*\n* ```\n* photon::effects::inc_brightness(img, 10);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} brightness\n*/\nexport function inc_brightness(photon_image, brightness) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(brightness);\n    wasm.inc_brightness(photon_image.ptr, brightness);\n}\n\n/**\n* Adjust the contrast of an image by a factor.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `contrast` - An f32 factor used to adjust contrast. Between [-255.0, 255.0]. The algorithm will\n* clamp results if passed factor is out of range.\n* # Example\n*\n* ```\n* photon::effects::adjust_contrast(photon_image, 30.0);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} contrast\n*/\nexport function adjust_contrast(photon_image, contrast) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.adjust_contrast(photon_image.ptr, contrast);\n}\n\n/**\n* Tint an image by adding an offset to averaged RGB channel values.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `r_offset` - The amount the  R channel should be incremented by.\n* * `g_offset` - The amount the G channel should be incremented by.\n* * `b_offset` - The amount the B channel should be incremented by.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* photon::tint(img, 10, 20, 15);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n*/\nexport function tint(photon_image, r_offset, g_offset, b_offset) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(r_offset);\n    _assertNum(g_offset);\n    _assertNum(b_offset);\n    wasm.tint(photon_image.ptr, r_offset, g_offset, b_offset);\n}\n\n/**\n* Horizontal strips. Divide an image into a series of equal-height strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n*/\nexport function horizontal_strips(photon_image, num_strips) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(num_strips);\n    wasm.horizontal_strips(photon_image.ptr, num_strips);\n}\n\n/**\n* Vertical strips. Divide an image into a series of equal-width strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n*/\nexport function vertical_strips(photon_image, num_strips) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(num_strips);\n    wasm.vertical_strips(photon_image.ptr, num_strips);\n}\n\n/**\n* Alter a select channel by incrementing or decrementing its value by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel you wish to alter, it should be either 0, 1 or 2,\n* representing R, G, or B respectively. (O=Red, 1=Green, 2=Blue)\n* * `amount` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* A positive value will increment/decrement the channel\\'s value, a negative value will decrement the channel\\'s value.\n*\n* ## Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* photon::channels::alter_channel(&mut img, 0, 10);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(img, \\\"new_image.png\\\");\n* ```\n*\n* Adds a constant to a select R, G, or B channel\\'s value.\n*\n* ### Decrease a channel\\'s value\n* // For example, to decrease the Green channel for all pixels by 20:\n* ```\n* use photon::channels;\n* photon::channels::alter_channel(&mut img, 1, -20);\n* ```\n* **Note**: Note the use of a minus symbol when decreasing the channel.\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} amt\n*/\nexport function alter_channel(img, channel, amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(channel);\n    _assertNum(amt);\n    wasm.alter_channel(img.ptr, channel, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Red channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* photon::channels::alter_red_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} amt\n*/\nexport function alter_red_channel(photon_image, amt) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(amt);\n    wasm.alter_red_channel(photon_image.ptr, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Green channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Green channel for all pixels by 20:\n* use photon::channels;\n* photon::channels::alter_green_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n*/\nexport function alter_green_channel(img, amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(amt);\n    wasm.alter_green_channel(img.ptr, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Blue channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Blue channel for all pixels by 10:\n* use photon::channels;\n* photon::channels::alter_blue_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n*/\nexport function alter_blue_channel(img, amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(amt);\n    wasm.alter_blue_channel(img.ptr, amt);\n}\n\n/**\n* Increment/decrement two channels\\' values simultaneously by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt1` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* * `channel2` -A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt2` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red and Blue channels per pixel:\n* photon::channels::inc_two_channels(&mut img, 0, 10, 2, 20);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} amt1\n* @param {number} channel2\n* @param {number} amt2\n*/\nexport function alter_two_channels(img, channel1, amt1, channel2, amt2) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(channel1);\n    _assertNum(amt1);\n    _assertNum(channel2);\n    _assertNum(amt2);\n    wasm.alter_two_channels(img.ptr, channel1, amt1, channel2, amt2);\n}\n\n/**\n* Increment all 3 channels\\' values by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `r_amt` - The amount to increment/decrement the Red channel by.\n* * `g_amt` - The amount to increment/decrement the Green channel by.\n* * `b_amt` - The amount to increment/decrement the Blue channel by.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red channel by 10, the Green channel by 20,\n* // and the Blue channel by 50:\n* // photon::channels::alter_channels(&mut img, 10, 20, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} r_amt\n* @param {number} g_amt\n* @param {number} b_amt\n*/\nexport function alter_channels(img, r_amt, g_amt, b_amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(r_amt);\n    _assertNum(g_amt);\n    _assertNum(b_amt);\n    wasm.alter_channels(img.ptr, r_amt, g_amt, b_amt);\n}\n\n/**\n* Set a certain channel to zero, thus removing the channel\\'s influence in the pixels\\' final rendered colour.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel to be removed; must be a usize from 0 to 2, with 0 representing Red, 1 representing Green, and 2 representing Blue.\n* * `min_filter` - Minimum filter. Value between 0 and 255. Only remove the channel if the current pixel\\'s channel value is less than this minimum filter. To completely\n* remove the channel, set this value to 255, to leave the channel as is, set to 0, and to set a channel to zero for a pixel whose red value is greater than 50,\n* then channel would be 0 and min_filter would be 50.\n*\n* # Example\n*\n* ```\n* // For example, to remove the Red channel with a min_filter of 100:\n* photon::channels::remove_channel(&mut img, 0, 100);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} min_filter\n*/\nexport function remove_channel(img, channel, min_filter) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(channel);\n    _assertNum(min_filter);\n    wasm.remove_channel(img.ptr, channel, min_filter);\n}\n\n/**\n* Remove the Red channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the red channel for red channel pixel values less than 50:\n* photon::channels::remove_red_channel(&mut img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nexport function remove_red_channel(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(min_filter);\n    wasm.remove_red_channel(img.ptr, min_filter);\n}\n\n/**\n* Remove the Green channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the green channel for green channel pixel values less than 50:\n* photon::channels::remove_green_channel(img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nexport function remove_green_channel(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(min_filter);\n    wasm.remove_green_channel(img.ptr, min_filter);\n}\n\n/**\n* Remove the Blue channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the blue channel for blue channel pixel values less than 50:\n* photon::channels::remove_blue_channel(&mut img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nexport function remove_blue_channel(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(min_filter);\n    wasm.remove_blue_channel(img.ptr, min_filter);\n}\n\n/**\n* Swap two channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Red would be represented by 0, Green by 1, and Blue by 2.\n* * `channel2` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Same as above.\n*\n* # Example\n*\n* ```\n* // For example, to swap the values of the Red channel with the values of the Blue channel:\n* photon::channels::swap_channels(&mut img, 0, 2);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} channel2\n*/\nexport function swap_channels(img, channel1, channel2) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(channel1);\n    _assertNum(channel2);\n    wasm.swap_channels(img.ptr, channel1, channel2);\n}\n\n/**\n* Selective hue rotation.\n*\n* Only rotate the hue of a pixel if its RGB values are within a specified range.\n* This function only rotates a pixel\\'s hue to another  if it is visually similar to the colour specified.\n* For example, if a user wishes all pixels that are blue to be changed to red, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `degrees` - The amount of degrees to hue rotate by.\n*\n* # Example\n*\n* ```\n* // For example, to only rotate the pixels that are of RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_hue_rotate(&mut img, ref_color, 180);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @param {number} degrees\n*/\nexport function selective_hue_rotate(photon_image, ref_color, degrees) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(ref_color, Rgb);\n    if (ref_color.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_hue_rotate(photon_image.ptr, ptr0, degrees);\n}\n\n/**\n* Invert RGB value of an image.\n*\n* # Arguments\n* * `photon_image` - A DynamicImage that contains a view into the image.\n* # Example\n*\n* ```\n* photon::channels::invert(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function invert(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.invert(photon_image.ptr);\n}\n\n/**\n* Selectively lighten an image.\n*\n* Only lighten the hue of a pixel if its colour matches or is similar to the RGB colour specified.\n* For example, if a user wishes all pixels that are blue to be lightened, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The level from 0 to 1 to lighten the hue by. Increasing by 10% would have an `amt` of 0.1\n*\n* # Example\n*\n* ```\n* // For example, to only lighten the pixels that are of or similar to RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_lighten(&mut img, ref_color, 0.2);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nexport function selective_lighten(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(ref_color, Rgb);\n    if (ref_color.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_lighten(img.ptr, ptr0, amt);\n}\n\n/**\n* Selectively desaturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only desaturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to be desaturated by 0.1, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of desaturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only desaturate the pixels that are similar to the RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_desaturate(&mut img, ref_color, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nexport function selective_desaturate(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(ref_color, Rgb);\n    if (ref_color.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_desaturate(img.ptr, ptr0, amt);\n}\n\n/**\n* Selectively saturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only saturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to have an increase in saturation by 10%, they can selectively specify only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of saturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only increase the saturation of pixels that are similar to the RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_saturate(&mut img, ref_color, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nexport function selective_saturate(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(ref_color, Rgb);\n    if (ref_color.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_saturate(img.ptr, ptr0, amt);\n}\n\n/**\n* Selectively changes a pixel to greyscale if it is *not* visually similar or close to the colour specified.\n* Only changes the colour of a pixel if its RGB values are within a specified range.\n*\n* (Similarity between two colours is calculated via the CIE76 formula.)\n* For example, if a user wishes all pixels that are *NOT* blue to be displayed in greyscale, they can selectively specify only the blue pixels to be\n* kept in the photo.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n*\n* # Example\n*\n* ```\n* // For example, to greyscale all pixels that are *not* visually similar to the RGB colour RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_greyscale(&mut img, ref_color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n*/\nexport function selective_greyscale(photon_image, ref_color) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    _assertClass(ref_color, Rgb);\n    if (ref_color.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_greyscale(ptr0, ptr1);\n}\n\n/**\n* Solarization on the Blue channel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::neue(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function neue(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.neue(photon_image.ptr);\n}\n\n/**\n* Solarization on the Red and Green channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::lix(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function lix(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.lix(photon_image.ptr);\n}\n\n/**\n* Solarization on the Red and Blue channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::ryo(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function ryo(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.ryo(photon_image.ptr);\n}\n\n/**\n* Apply a filter to an image. Over 20 filters are available.\n* The filters are as follows:\n* * **oceanic**: Add an aquamarine-tinted hue to an image.\n* * **islands**: Aquamarine tint.\n* * **marine**: Add a green/blue mixed hue to an image.\n* * **seagreen**: Dark green hue, with tones of blue.\n* * **flagblue**: Royal blue tint\n* * **liquid**: Blue-inspired tint.\n* * **diamante**: Custom filter with a blue/turquoise tint.\n* * **radio**: Fallout-style radio effect.\n* * **twenties**: Slight-blue tinted historical effect.\n* * **rosetint**: Rose-tinted filter.\n* * **mauve**: Purple-infused filter.\n* * **bluechrome**: Blue monochrome effect.\n* * **vintage**: Vintage filter with a red tint.\n* * **perfume**: Increase the blue channel, with moderate increases in the Red and Green channels.\n* * **serenity**: Custom filter with an increase in the Blue channel\\'s values.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `filter_name` - The filter\\'s name. Choose from the selection above, eg: \\\"oceanic\\\n* # Example\n*\n* ```\n* // For example, to add a filter called \\\"vintage\\\" to an image:\n* use photon::filters;\n* photon::filters::filter(&mut img, \\\"vintage\\\");\n* ```\n* @param {PhotonImage} img\n* @param {string} filter_name\n*/\nexport function filter(img, filter_name) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(filter_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.filter(img.ptr, ptr0, len0);\n}\n\n/**\n* Apply a lofi effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::lofi(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function lofi(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.lofi(img.ptr);\n}\n\n/**\n* Add a rose tint to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::pastel_pink(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function pastel_pink(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.pastel_pink(img.ptr);\n}\n\n/**\n* Apply a vintage, golden hue to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::golden(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function golden(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.golden(img.ptr);\n}\n\n/**\n* Increased contrast filter effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::cali(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function cali(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.cali(img.ptr);\n}\n\n/**\n* Increased contrast, greyscale effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::dramatic(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function dramatic(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.dramatic(img.ptr);\n}\n\n/**\n* Apply a red hue, with increased contrast and brightness.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::firenze(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function firenze(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.firenze(img.ptr);\n}\n\n/**\n* Apply a greyscale effect with increased contrast.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::obsidian(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function obsidian(img) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.obsidian(img.ptr);\n}\n\n/**\n* Add a watermark to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `watermark` - The watermark to be placed onto the `img` image.\n* * `x` - The x coordinate where the watermark\\'s top corner should be positioned.\n* * `y` - The y coordinate where the watermark\\'s top corner should be positioned.\n* # Example\n*\n* ```\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon::multiple;\n* photon::multiple::watermark(img, watermark, 30, 40);\n* ```\n* @param {PhotonImage} img\n* @param {PhotonImage} watermark\n* @param {number} x\n* @param {number} y\n*/\nexport function watermark(img, watermark, x, y) {\n    _assertClass(img, PhotonImage);\n    if (img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(watermark, PhotonImage);\n    if (watermark.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertNum(x);\n    _assertNum(y);\n    wasm.watermark(img.ptr, watermark.ptr, x, y);\n}\n\n/**\n* Blend two images together.\n*\n* The `blend_mode` (3rd param) determines which blending mode to use; change this for varying effects.\n* The blend modes available include: `overlay`, `over`, `atop`, `xor`, `multiply`, `burn`, `soft_light`, `hard_light`,\n* `difference`, `lighten`, `darken`, `dodge`, `plus`, `exclusion` (more to come)\n* NOTE: The first image must be smaller than the second image passed as params.\n* If the first image were larger than the second, then there would be overflowing pixels which would have no corresponding pixels\n* in the second image.\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `img2` - The 2nd DynamicImage to be blended with the first.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```\n* // For example, to blend two images with the `multiply` blend mode:\n* use photon::multiple;\n* photon::multiple::blend(&mut img, &img2, \\\"multiply\\\");\n* ```\n* @param {PhotonImage} photon_image\n* @param {PhotonImage} photon_image2\n* @param {string} blend_mode\n*/\nexport function blend(photon_image, photon_image2, blend_mode) {\n    _assertClass(photon_image, PhotonImage);\n    if (photon_image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    _assertClass(photon_image2, PhotonImage);\n    if (photon_image2.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(blend_mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.blend(photon_image.ptr, photon_image2.ptr, ptr0, len0);\n}\n\n/**\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nexport function create_gradient(width, height) {\n    _assertNum(width);\n    _assertNum(height);\n    var ret = wasm.create_gradient(width, height);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Apply a gradient to an image.\n* @param {PhotonImage} image\n*/\nexport function apply_gradient(image) {\n    _assertClass(image, PhotonImage);\n    if (image.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    wasm.apply_gradient(image.ptr);\n}\n\n/**\n* Add bordered-text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon::text::draw_text_with_border;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/cats.PNG\\\");\n*\n* draw_text_with_border(&mut img, \\\"Welcome to Photon!\\\", 10, 10);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n*/\nexport function draw_text_with_border(photon_img, text, x, y) {\n    _assertClass(photon_img, PhotonImage);\n    if (photon_img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    _assertNum(x);\n    _assertNum(y);\n    wasm.draw_text_with_border(photon_img.ptr, ptr0, len0, x, y);\n}\n\n/**\n* Add text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon::text::draw_text;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/cats.PNG\\\");\n*\n* draw_text(&mut img, \\\"Welcome to Photon!\\\", 10, 10);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n*/\nexport function draw_text(photon_img, text, x, y) {\n    _assertClass(photon_img, PhotonImage);\n    if (photon_img.ptr === 0) {\n        throw new Error('Attempt to use a moved value');\n    }\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    _assertNum(x);\n    _assertNum(y);\n    wasm.draw_text(photon_img.ptr, ptr0, len0, x, y);\n}\n\nfunction logError(e) {\n    let error = (function () {\n        try {\n            return e instanceof Error ? `${e.message}\\n\\nStack:\\n${e.stack}` : e.toString();\n        } catch(_) {\n            return \"<failed to stringify thrown value>\";\n        }\n    }());\n    console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", error);\n    throw e;\n}\n\nfunction handleError(e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetUint8ClampedMemory0 = null;\nfunction getUint8ClampedMemory0() {\n    if (cachegetUint8ClampedMemory0 === null || cachegetUint8ClampedMemory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8ClampedMemory0 = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachegetUint8ClampedMemory0;\n}\n\nfunction getClampedArrayU8FromWasm0(ptr, len) {\n    return getUint8ClampedMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nexport const SamplingFilter = Object.freeze({ Nearest:1,Triangle:2,CatmullRom:3,Gaussian:4,Lanczos3:5, });\n/**\n* Provides the image\\'s height, width, and contains the image\\'s raw pixels.\n* For use when communicating between JS and WASM, and also natively.\n*/\nexport class PhotonImage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PhotonImage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_photonimage_free(ptr);\n    }\n    /**\n    * Create a new PhotonImage from a Vec of u8s, which represent raw pixels.\n    * @param {Uint8Array} raw_pixels\n    * @param {number} width\n    * @param {number} height\n    */\n    constructor(raw_pixels, width, height) {\n        var ptr0 = passArray8ToWasm0(raw_pixels, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertNum(width);\n        _assertNum(height);\n        var ret = wasm.photonimage_new(ptr0, len0, width, height);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Create a new PhotonImage from a base64 string.\n    * @param {string} base64\n    * @returns {PhotonImage}\n    */\n    static new_from_base64(base64) {\n        var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new_from_base64(ptr0, len0);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Create a new PhotonImage from a byteslice.\n    * @param {Uint8Array} vec\n    * @returns {PhotonImage}\n    */\n    static new_from_byteslice(vec) {\n        var ptr0 = passArray8ToWasm0(vec, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new_from_byteslice(ptr0, len0);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Get the width of the PhotonImage.\n    * @returns {number}\n    */\n    get_width() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.photonimage_get_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the PhotonImage\\'s pixels as a Vec of u8s.\n    * @returns {Uint8Array}\n    */\n    get_raw_pixels() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        wasm.photonimage_get_raw_pixels(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * Get the height of the PhotonImage.\n    * @returns {number}\n    */\n    get_height() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.photonimage_get_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Convert the PhotonImage to base64.\n    * @returns {string}\n    */\n    get_base64() {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            _assertNum(this.ptr);\n            wasm.photonimage_get_base64(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Convert the PhotonImage\\'s raw pixels to JS-compatible ImageData.\n    * @returns {any}\n    */\n    get_image_data() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.photonimage_get_image_data(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Convert ImageData to raw pixels, and update the PhotonImage\\'s raw pixels to this.\n    * @param {any} img_data\n    */\n    set_imgdata(img_data) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        wasm.photonimage_set_imgdata(this.ptr, addHeapObject(img_data));\n    }\n}\n/**\n* RGB color type.\n*/\nexport class Rgb {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rgb.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rgb_free(ptr);\n    }\n    /**\n    * Create a new RGB struct.\n    * @param {number} r\n    * @param {number} g\n    * @param {number} b\n    */\n    constructor(r, g, b) {\n        _assertNum(r);\n        _assertNum(g);\n        _assertNum(b);\n        var ret = wasm.rgb_new(r, g, b);\n        return Rgb.__wrap(ret);\n    }\n    /**\n    * Set the Red value.\n    * @param {number} r\n    */\n    set_red(r) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(r);\n        wasm.rgb_set_red(this.ptr, r);\n    }\n    /**\n    * Get the Green value.\n    * @param {number} g\n    */\n    set_green(g) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(g);\n        wasm.rgb_set_green(this.ptr, g);\n    }\n    /**\n    * Set the Blue value.\n    * @param {number} b\n    */\n    set_blue(b) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(b);\n        wasm.rgb_set_blue(this.ptr, b);\n    }\n    /**\n    * Get the Red value.\n    * @returns {number}\n    */\n    get_red() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.rgb_get_red(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Green value.\n    * @returns {number}\n    */\n    get_green() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.rgb_get_green(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Blue value.\n    * @returns {number}\n    */\n    get_blue() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.rgb_get_blue(this.ptr);\n        return ret;\n    }\n}\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    try {\n        var ret = new Error();\n        return addHeapObject(ret);\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    try {\n        var ret = getObject(arg1).stack;\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_instanceof_CanvasRenderingContext2D = function(arg0) {\n    try {\n        var ret = getObject(arg0) instanceof CanvasRenderingContext2D;\n        _assertBoolean(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_get_image_data_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3, arg4) {\n    try {\n        try {\n            var ret = getObject(arg0).getImageData(arg1, arg2, arg3, arg4);\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_put_image_data_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3) {\n    try {\n        try {\n            getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_create_element_Document = function(arg0, arg1, arg2) {\n    try {\n        try {\n            var ret = getObject(arg0).createElement(getStringFromWasm0(arg1, arg2));\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_body_Document = function(arg0) {\n    try {\n        var ret = getObject(arg0).body;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_instanceof_HTMLCanvasElement = function(arg0) {\n    try {\n        var ret = getObject(arg0) instanceof HTMLCanvasElement;\n        _assertBoolean(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_get_context_HTMLCanvasElement = function(arg0, arg1, arg2) {\n    try {\n        try {\n            var ret = getObject(arg0).getContext(getStringFromWasm0(arg1, arg2));\n            return isLikeNone(ret) ? 0 : addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_width_HTMLCanvasElement = function(arg0) {\n    try {\n        var ret = getObject(arg0).width;\n        _assertNum(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_set_width_HTMLCanvasElement = function(arg0, arg1) {\n    try {\n        getObject(arg0).width = arg1 >>> 0;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_height_HTMLCanvasElement = function(arg0) {\n    try {\n        var ret = getObject(arg0).height;\n        _assertNum(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_set_height_HTMLCanvasElement = function(arg0, arg1) {\n    try {\n        getObject(arg0).height = arg1 >>> 0;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_new_with_u8_clamped_array_and_sh_ImageData = function(arg0, arg1, arg2, arg3) {\n    try {\n        try {\n            var ret = new ImageData(getClampedArrayU8FromWasm0(arg0, arg1), arg2 >>> 0, arg3 >>> 0);\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_width_ImageData = function(arg0) {\n    try {\n        var ret = getObject(arg0).width;\n        _assertNum(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_height_ImageData = function(arg0) {\n    try {\n        var ret = getObject(arg0).height;\n        _assertNum(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_data_ImageData = function(arg0, arg1) {\n    try {\n        var ret = getObject(arg1).data;\n        var ptr0 = passArray8ToWasm0(ret, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_append_child_Node = function(arg0, arg1) {\n    try {\n        try {\n            var ret = getObject(arg0).appendChild(getObject(arg1));\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_set_text_content_Node = function(arg0, arg1, arg2) {\n    try {\n        getObject(arg0).textContent = arg1 === 0 ? undefined : getStringFromWasm0(arg1, arg2);\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_instanceof_Window = function(arg0) {\n    try {\n        var ret = getObject(arg0) instanceof Window;\n        _assertBoolean(ret);\n        return ret;\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __widl_f_document_Window = function(arg0) {\n    try {\n        var ret = getObject(arg0).document;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_newnoargs_c4b2cbbd30e2d057 = function(arg0, arg1) {\n    try {\n        var ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_call_12b949cfc461d154 = function(arg0, arg1) {\n    try {\n        try {\n            var ret = getObject(arg0).call(getObject(arg1));\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_globalThis_22e06d4bea0084e3 = function() {\n    try {\n        try {\n            var ret = globalThis.globalThis;\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_self_00b0599bca667294 = function() {\n    try {\n        try {\n            var ret = self.self;\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_window_aa795c5aad79b8ac = function() {\n    try {\n        try {\n            var ret = window.window;\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbg_global_cc239dc2303f417c = function() {\n    try {\n        try {\n            var ret = global.global;\n            return addHeapObject(ret);\n        } catch (e) {\n            handleError(e)\n        }\n    } catch (e) {\n        logError(e)\n    }\n};\n\nexport const __wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    _assertBoolean(ret);\n    return ret;\n};\n\nexport const __wbindgen_object_clone_ref = function(arg0) {\n    var ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n"],"sourceRoot":""}