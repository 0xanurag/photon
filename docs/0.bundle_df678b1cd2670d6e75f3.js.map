{"version":3,"sources":["webpack:///../crate/pkg/photon_rs.js","webpack:///./node_modules/util/util.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/node-libs-browser/node_modules/process/browser.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/inherits/inherits_browser.js"],"names":["heap","Array","getObject","idx","fill","undefined","push","heap_next","length","takeObject","ret","dropObject","addHeapObject","obj","WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","cachedTextEncoder","TextEncoder","require","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","_assertClass","instance","klass","Error","name","photon_image","channel_index","PhotonImage","offset_red","img","offset_amt","offset_green","offset_blue","multiple_offsets","channel_index2","primary","colorize","solarize","solarize_retimg","__wrap","inc_brightness","brightness","adjust_contrast","contrast","tint","r_offset","g_offset","b_offset","horizontal_strips","num_strips","vertical_strips","noise_reduction","sharpen","edge_detection","identity","box_blur","gaussian_blur","radius","detect_horizontal_lines","detect_vertical_lines","detect_45_deg_lines","detect_135_deg_lines","laplace","edge_one","emboss","sobel_horizontal","prewitt_horizontal","sobel_vertical","alter_channel","channel","amt","alter_red_channel","alter_green_channel","alter_blue_channel","alter_two_channels","channel1","amt1","channel2","amt2","alter_channels","r_amt","g_amt","b_amt","remove_channel","min_filter","remove_red_channel","remove_green_channel","remove_blue_channel","swap_channels","selective_hue_rotate","ref_color","degrees","Rgb","ptr0","invert","selective_lighten","selective_desaturate","selective_saturate","selective_greyscale","ptr1","crop","x1","y1","x2","y2","crop_img_browser","source_canvas","width","height","left","top","fliph","flipv","resize_img_browser","photon_img","sampling_filter","resize","seam_carve","monochrome","sepia","grayscale","grayscale_human_corrected","desaturate","decompose_min","decompose_max","grayscale_shades","num_shades","r_grayscale","g_grayscale","b_grayscale","single_channel_grayscale","threshold","draw_text_with_border","text","x","y","len0","draw_text","passArray8ToWasm0","getArrayU8FromWasm0","run","stack_pointer","addBorrowedObject","get_image_data","canvas","ctx","putImageData","new_image","open_image","to_raw_pixels","imgdata","r0","r1","v0","base64_to_image","base64","base64_to_vec","v1","to_image_data","watermark","blend","photon_image2","blend_mode","blend_img_browser","base_img","overlay_img","create_gradient","apply_gradient","image","lch","mode","hsl","hsv","hue_rotate_hsl","hue_rotate_hsv","hue_rotate_lch","saturate_hsl","level","saturate_lch","saturate_hsv","lighten_lch","lighten_hsl","lighten_hsv","darken_lch","darken_hsl","darken_hsv","desaturate_hsv","desaturate_hsl","desaturate_lch","mix_with_colour","mix_colour","opacity","neue","lix","ryo","filter","filter_name","lofi","pastel_pink","golden","cali","dramatic","firenze","obsidian","handleError","e","isLikeNone","cachegetUint8ClampedMemory0","getClampedArrayU8FromWasm0","Uint8ClampedArray","SamplingFilter","Object","freeze","Nearest","Triangle","CatmullRom","Gaussian","Lanczos3","raw_pixels","this","create","prototype","img_data","vec","r","g","b","__wbindgen_object_drop_ref","arg0","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","arg1","stack","__wbg_error_4bb6c2a97407129a","console","error","__widl_instanceof_Window","Window","__widl_instanceof_CanvasRenderingContext2D","CanvasRenderingContext2D","__widl_f_set_global_composite_operation_CanvasRenderingContext2D","arg2","globalCompositeOperation","__widl_f_draw_image_with_html_image_element_CanvasRenderingContext2D","arg3","drawImage","__widl_f_draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D","arg4","arg5","arg6","arg7","arg8","arg9","__widl_f_get_image_data_CanvasRenderingContext2D","getImageData","__widl_f_put_image_data_CanvasRenderingContext2D","__widl_f_create_element_Document","createElement","__widl_f_body_Document","body","__widl_instanceof_HTMLCanvasElement","HTMLCanvasElement","__widl_f_get_context_HTMLCanvasElement","getContext","__widl_f_width_HTMLCanvasElement","__widl_f_set_width_HTMLCanvasElement","__widl_f_height_HTMLCanvasElement","__widl_f_set_height_HTMLCanvasElement","__widl_f_new_with_u8_clamped_array_and_sh_ImageData","ImageData","__widl_f_width_ImageData","__widl_f_height_ImageData","__widl_f_data_ImageData","data","__widl_f_append_child_Node","appendChild","__widl_f_set_text_content_Node","textContent","__widl_f_document_Window","document","__wbg_call_12b949cfc461d154","call","__wbindgen_object_clone_ref","__wbg_newnoargs_c4b2cbbd30e2d057","Function","__wbg_globalThis_22e06d4bea0084e3","globalThis","__wbg_self_00b0599bca667294","self","__wbg_window_aa795c5aad79b8ac","window","__wbg_global_cc239dc2303f417c","global","__wbindgen_is_undefined","__wbindgen_debug_string","debugString","val","type","description","isArray","debug","i","className","builtInMatches","exec","toString","JSON","stringify","_","message","__wbindgen_throw","__wbindgen_rethrow","getOwnPropertyDescriptors","keys","descriptors","getOwnPropertyDescriptor","formatRegExp","exports","format","f","isString","objects","arguments","inspect","join","args","str","String","replace","Number","isNull","isObject","deprecate","fn","msg","process","noDeprecation","apply","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","value","recurseTimes","isFunction","constructor","primitive","simple","isNumber","formatPrimitive","visibleKeys","array","hash","forEach","arrayToHash","getOwnPropertyNames","isError","indexOf","formatError","isRegExp","RegExp","isDate","Date","output","base","braces","toUTCString","l","hasOwnProperty","formatProperty","key","match","formatArray","map","pop","reduce","prev","cur","numLinesEst","reduceToSingleString","desc","get","split","line","substr","ar","re","objectToString","d","o","pad","n","debuglog","env","NODE_DEBUG","toUpperCase","test","pid","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","prop","log","inherits","origin","add","kCustomPromisifiedSymbol","Symbol","callbackifyOnRejected","reason","cb","newReason","promisify","original","TypeError","defineProperty","enumerable","writable","configurable","promiseResolve","promiseReject","promise","Promise","resolve","reject","err","setPrototypeOf","getPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","then","nextTick","rej","module","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","marker","runClearTimeout","Item","noop","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","copy","readUInt8","ctor","superCtor","super_","TempCtor"],"mappings":"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","file":"0.bundle_df678b1cd2670d6e75f3.js","sourcesContent":["import * as wasm from './photon_rs_bg.wasm';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? require('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? require('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* Adds an offset to the image by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to offset pixels by 30 pixels on the red channel:\n* use photon_rs::effects::offset;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* offset(&mut img, 0_usize, 30_u32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel_index\n* @param {number} offset\n*/\nexport function offset(photon_image, channel_index, offset) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.offset(photon_image.ptr, channel_index, offset);\n}\n\n/**\n* Adds an offset to the red channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the red channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the red channel by 30 pixels.\n* use photon_rs::effects::offset_red;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* offset_red(&mut img, 30_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nexport function offset_red(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.offset_red(img.ptr, offset_amt);\n}\n\n/**\n* Adds an offset to the green channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the green channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the green channel by 30 pixels.\n* use photon_rs::effects::offset_green;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* offset_green(&mut img, 30_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nexport function offset_green(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.offset_green(img.ptr, offset_amt);\n}\n\n/**\n* Adds an offset to the blue channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset_amt` - The offset you want to move the blue channel by.\n* # Example\n* // For example, to add an offset to the green channel by 40 pixels.\n*\n* ```\n* use photon_rs::effects::offset_blue;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* offset_blue(&mut img, 40_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nexport function offset_blue(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.offset_blue(img.ptr, offset_amt);\n}\n\n/**\n* Adds multiple offsets to the image by a certain number of pixels (on two channels).\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to add a 30-pixel offset to both the red and blue channels:\n* use photon_rs::effects::multiple_offsets;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* multiple_offsets(&mut img, 30_u32, 0_usize, 2_usize);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} offset\n* @param {number} channel_index\n* @param {number} channel_index2\n*/\nexport function multiple_offsets(photon_image, offset, channel_index, channel_index2) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.multiple_offsets(photon_image.ptr, offset, channel_index, channel_index2);\n}\n\n/**\n* Reduces an image to the primary colours.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to add a primary colour effect to an image of type `DynamicImage`:\n* use photon_rs::effects::primary;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* primary(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function primary(img) {\n    _assertClass(img, PhotonImage);\n    wasm.primary(img.ptr);\n}\n\n/**\n* Colorizes the green channels of the image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon_rs::effects::colorize;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* colorize(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function colorize(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.colorize(photon_image.ptr);\n}\n\n/**\n* Applies a solarizing effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon_rs::effects::solarize;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* solarize(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function solarize(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.solarize(photon_image.ptr);\n}\n\n/**\n* Applies a solarizing effect to an image and returns the resulting PhotonImage.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to solarize \\\"retimg\\\" an image of type `PhotonImage`:\n* use photon_rs::effects::solarize_retimg;\n* use photon_rs::native::open_image;\n* use photon_rs::PhotonImage;\n*\n* let img = open_image(\\\"img.jpg\\\");\n* let result: PhotonImage = solarize_retimg(&img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {PhotonImage}\n*/\nexport function solarize_retimg(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    var ret = wasm.solarize_retimg(photon_image.ptr);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Increase the brightness of an image by a factor.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `brightness` - A u8 to add to the brightness.\n* # Example\n*\n* ```\n* use photon_rs::effects::inc_brightness;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* inc_brightness(&mut img, 10_u8);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} brightness\n*/\nexport function inc_brightness(photon_image, brightness) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.inc_brightness(photon_image.ptr, brightness);\n}\n\n/**\n* Adjust the contrast of an image by a factor.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `contrast` - An f32 factor used to adjust contrast. Between [-255.0, 255.0]. The algorithm will\n* clamp results if passed factor is out of range.\n* # Example\n*\n* ```\n* use photon_rs::effects::adjust_contrast;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* adjust_contrast(&mut img, 30_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} contrast\n*/\nexport function adjust_contrast(photon_image, contrast) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.adjust_contrast(photon_image.ptr, contrast);\n}\n\n/**\n* Tint an image by adding an offset to averaged RGB channel values.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `r_offset` - The amount the R channel should be incremented by.\n* * `g_offset` - The amount the G channel should be incremented by.\n* * `b_offset` - The amount the B channel should be incremented by.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* use photon_rs::effects::tint;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* tint(&mut img, 10_u32, 20_u32, 15_u32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n*/\nexport function tint(photon_image, r_offset, g_offset, b_offset) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.tint(photon_image.ptr, r_offset, g_offset, b_offset);\n}\n\n/**\n* Horizontal strips. Divide an image into a series of equal-height strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n*/\nexport function horizontal_strips(photon_image, num_strips) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.horizontal_strips(photon_image.ptr, num_strips);\n}\n\n/**\n* Vertical strips. Divide an image into a series of equal-width strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n*/\nexport function vertical_strips(photon_image, num_strips) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.vertical_strips(photon_image.ptr, num_strips);\n}\n\n/**\n* Noise reduction.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to noise reduct an image:\n* use photon_rs::conv::noise_reduction;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* noise_reduction(&mut img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n*/\nexport function noise_reduction(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.noise_reduction(photon_image.ptr);\n}\n\n/**\n* Sharpen an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon_rs::conv::sharpen;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* sharpen(&mut img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n*/\nexport function sharpen(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.sharpen(photon_image.ptr);\n}\n\n/**\n* Apply edge detection to an image, to create a dark version with its edges highlighted.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon_rs::conv::edge_detection;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* edge_detection(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function edge_detection(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.edge_detection(photon_image.ptr);\n}\n\n/**\n* Apply an identity kernel convolution to an image.\n*\n* # Arguments\n* * `img` -A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply an identity kernel convolution:\n* use photon_rs::conv::identity;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* identity(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function identity(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.identity(photon_image.ptr);\n}\n\n/**\n* Apply a box blur effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a box blur effect:\n* use photon_rs::conv::box_blur;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* box_blur(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function box_blur(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.box_blur(photon_image.ptr);\n}\n\n/**\n* Gaussian blur in linear time.\n*\n* Reference: http://blog.ivank.net/fastest-gaussian-blur.html\n*\n* # Arguments\n* * `photon_image` - A PhotonImage\n* * `radius` - blur radius\n* # Example\n*\n* ```\n* use photon_rs::conv::gaussian_blur;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* gaussian_blur(&mut img, 3_i32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} radius\n*/\nexport function gaussian_blur(photon_image, radius) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.gaussian_blur(photon_image.ptr, radius);\n}\n\n/**\n* Detect horizontal lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the horizontal lines in an image:\n* use photon_rs::conv::detect_horizontal_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* detect_horizontal_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_horizontal_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_horizontal_lines(photon_image.ptr);\n}\n\n/**\n* Detect vertical lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the vertical lines in an image:\n* use photon_rs::conv::detect_vertical_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* detect_vertical_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_vertical_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_vertical_lines(photon_image.ptr);\n}\n\n/**\n* Detect lines at a forty five degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a forty five degree angle in an image:\n* use photon_rs::conv::detect_45_deg_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* detect_45_deg_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_45_deg_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_45_deg_lines(photon_image.ptr);\n}\n\n/**\n* Detect lines at a 135 degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a 135 degree angle in an image:\n* use photon_rs::conv::detect_135_deg_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* detect_135_deg_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function detect_135_deg_lines(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_135_deg_lines(photon_image.ptr);\n}\n\n/**\n* Apply a standard laplace convolution.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a laplace effect:\n* use photon_rs::conv::laplace;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* laplace(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function laplace(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.laplace(photon_image.ptr);\n}\n\n/**\n* Preset edge effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply this effect:\n* use photon_rs::conv::edge_one;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* edge_one(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function edge_one(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.edge_one(photon_image.ptr);\n}\n\n/**\n* Apply an emboss effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply an emboss effect:\n* use photon_rs::conv::emboss;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* emboss(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function emboss(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.emboss(photon_image.ptr);\n}\n\n/**\n* Apply a horizontal Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Sobel filter:\n* use photon_rs::conv::sobel_horizontal;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* sobel_horizontal(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function sobel_horizontal(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.sobel_horizontal(photon_image.ptr);\n}\n\n/**\n* Apply a horizontal Prewitt convolution to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Prewitt convolution effect:\n* use photon_rs::conv::prewitt_horizontal;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* prewitt_horizontal(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function prewitt_horizontal(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.prewitt_horizontal(photon_image.ptr);\n}\n\n/**\n* Apply a vertical Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```\n* // For example, to apply a vertical Sobel filter:\n* use photon_rs::conv::sobel_vertical;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* sobel_vertical(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function sobel_vertical(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.sobel_vertical(photon_image.ptr);\n}\n\n/**\n* Alter a select channel by incrementing or decrementing its value by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel you wish to alter, it should be either 0, 1 or 2,\n* representing R, G, or B respectively. (O=Red, 1=Green, 2=Blue)\n* * `amount` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* A positive value will increment/decrement the channel\\'s value, a negative value will decrement the channel\\'s value.\n*\n* ## Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon_rs::channels::alter_channel;\n* use photon_rs::native::{open_image, save_image};\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_channel(&mut img, 0_usize, 10_i16);\n* // Write the contents of this image in JPG format.\n* save_image(img, \\\"new_image.jpg\\\");\n* ```\n*\n* Adds a constant to a select R, G, or B channel\\'s value.\n*\n* ### Decrease a channel\\'s value\n* // For example, to decrease the Green channel for all pixels by 20:\n* ```\n* use photon_rs::channels::alter_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_channel(&mut img, 1_usize, -20_i16);\n* ```\n* **Note**: Note the use of a minus symbol when decreasing the channel.\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} amt\n*/\nexport function alter_channel(img, channel, amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_channel(img.ptr, channel, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Red channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon_rs::channels::alter_red_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_red_channel(&mut mg, 10_i16);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} amt\n*/\nexport function alter_red_channel(photon_image, amt) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.alter_red_channel(photon_image.ptr, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Green channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Green channel for all pixels by 20:\n* use photon_rs::channels::alter_green_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_green_channel(&mut img, 20_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n*/\nexport function alter_green_channel(img, amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_green_channel(img.ptr, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Blue channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Blue channel for all pixels by 10:\n* use photon_rs::channels::alter_blue_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_blue_channel(&mut img, 10_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n*/\nexport function alter_blue_channel(img, amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_blue_channel(img.ptr, amt);\n}\n\n/**\n* Increment/decrement two channels\\' values simultaneously by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt1` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* * `channel2` -A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt2` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red and Blue channels per pixel:\n* use photon_rs::channels::alter_two_channels;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_two_channels(&mut img, 0_usize, 10_i16, 2_usize, 20_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} amt1\n* @param {number} channel2\n* @param {number} amt2\n*/\nexport function alter_two_channels(img, channel1, amt1, channel2, amt2) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_two_channels(img.ptr, channel1, amt1, channel2, amt2);\n}\n\n/**\n* Increment all 3 channels\\' values by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `r_amt` - The amount to increment/decrement the Red channel by.\n* * `g_amt` - The amount to increment/decrement the Green channel by.\n* * `b_amt` - The amount to increment/decrement the Blue channel by.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red channel by 10, the Green channel by 20,\n* // and the Blue channel by 50:\n* use photon_rs::channels::alter_channels;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* alter_channels(&mut img, 10_i16, 20_i16, 50_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} r_amt\n* @param {number} g_amt\n* @param {number} b_amt\n*/\nexport function alter_channels(img, r_amt, g_amt, b_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_channels(img.ptr, r_amt, g_amt, b_amt);\n}\n\n/**\n* Set a certain channel to zero, thus removing the channel\\'s influence in the pixels\\' final rendered colour.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel to be removed; must be a usize from 0 to 2, with 0 representing Red, 1 representing Green, and 2 representing Blue.\n* * `min_filter` - Minimum filter. Value between 0 and 255. Only remove the channel if the current pixel\\'s channel value is less than this minimum filter. To completely\n* remove the channel, set this value to 255, to leave the channel as is, set to 0, and to set a channel to zero for a pixel whose red value is greater than 50,\n* then channel would be 0 and min_filter would be 50.\n*\n* # Example\n*\n* ```\n* // For example, to remove the Red channel with a min_filter of 100:\n* use photon_rs::channels::remove_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* remove_channel(&mut img, 0_usize, 100_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} min_filter\n*/\nexport function remove_channel(img, channel, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_channel(img.ptr, channel, min_filter);\n}\n\n/**\n* Remove the Red channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the red channel for red channel pixel values less than 50:\n* use photon_rs::channels::remove_red_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* remove_red_channel(&mut img, 50_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nexport function remove_red_channel(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_red_channel(img.ptr, min_filter);\n}\n\n/**\n* Remove the Green channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the green channel for green channel pixel values less than 50:\n* use photon_rs::channels::remove_green_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* remove_green_channel(&mut img, 50_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nexport function remove_green_channel(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_green_channel(img.ptr, min_filter);\n}\n\n/**\n* Remove the Blue channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the blue channel for blue channel pixel values less than 50:\n* use photon_rs::channels::remove_blue_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* remove_blue_channel(&mut img, 50_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nexport function remove_blue_channel(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_blue_channel(img.ptr, min_filter);\n}\n\n/**\n* Swap two channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Red would be represented by 0, Green by 1, and Blue by 2.\n* * `channel2` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Same as above.\n*\n* # Example\n*\n* ```\n* // For example, to swap the values of the Red channel with the values of the Blue channel:\n* use photon_rs::channels::swap_channels;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* swap_channels(&mut img, 0_usize, 2_usize);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} channel2\n*/\nexport function swap_channels(img, channel1, channel2) {\n    _assertClass(img, PhotonImage);\n    wasm.swap_channels(img.ptr, channel1, channel2);\n}\n\n/**\n* Selective hue rotation.\n*\n* Only rotate the hue of a pixel if its RGB values are within a specified range.\n* This function only rotates a pixel\\'s hue to another  if it is visually similar to the colour specified.\n* For example, if a user wishes all pixels that are blue to be changed to red, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `degrees` - The amount of degrees to hue rotate by.\n*\n* # Example\n*\n* ```\n* // For example, to only rotate the pixels that are of RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_hue_rotate;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\\\"img.jpg\\\");\n* selective_hue_rotate(&mut img, ref_color, 180_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @param {number} degrees\n*/\nexport function selective_hue_rotate(photon_image, ref_color, degrees) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_hue_rotate(photon_image.ptr, ptr0, degrees);\n}\n\n/**\n* Invert RGB value of an image.\n*\n* # Arguments\n* * `photon_image` - A DynamicImage that contains a view into the image.\n* # Example\n*\n* ```\n* use photon_rs::channels::invert;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* invert(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function invert(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.invert(photon_image.ptr);\n}\n\n/**\n* Selectively lighten an image.\n*\n* Only lighten the hue of a pixel if its colour matches or is similar to the RGB colour specified.\n* For example, if a user wishes all pixels that are blue to be lightened, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The level from 0 to 1 to lighten the hue by. Increasing by 10% would have an `amt` of 0.1\n*\n* # Example\n*\n* ```\n* // For example, to only lighten the pixels that are of or similar to RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_lighten;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\\\"img.jpg\\\");\n* selective_lighten(&mut img, ref_color, 0.2_f32);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nexport function selective_lighten(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_lighten(img.ptr, ptr0, amt);\n}\n\n/**\n* Selectively desaturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only desaturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to be desaturated by 0.1, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of desaturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only desaturate the pixels that are similar to the RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_desaturate;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\\\"img.jpg\\\");\n* selective_desaturate(&mut img, ref_color, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nexport function selective_desaturate(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_desaturate(img.ptr, ptr0, amt);\n}\n\n/**\n* Selectively saturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only saturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to have an increase in saturation by 10%, they can selectively specify only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of saturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only increase the saturation of pixels that are similar to the RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_saturate;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\\\"img.jpg\\\");\n* selective_saturate(&mut img, ref_color, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nexport function selective_saturate(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_saturate(img.ptr, ptr0, amt);\n}\n\n/**\n* Selectively changes a pixel to greyscale if it is *not* visually similar or close to the colour specified.\n* Only changes the colour of a pixel if its RGB values are within a specified range.\n*\n* (Similarity between two colours is calculated via the CIE76 formula.)\n* For example, if a user wishes all pixels that are *NOT* blue to be displayed in greyscale, they can selectively specify only the blue pixels to be\n* kept in the photo.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n*\n* # Example\n*\n* ```\n* // For example, to greyscale all pixels that are *not* visually similar to the RGB colour RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_greyscale;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\\\"img.jpg\\\");\n* selective_greyscale(img, ref_color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n*/\nexport function selective_greyscale(photon_image, ref_color) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    _assertClass(ref_color, Rgb);\n    var ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_greyscale(ptr0, ptr1);\n}\n\n/**\n* Crop an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to crop an image at (0, 0) to (500, 800)\n* use photon_rs::native::{open_image, save_image};\n* use photon_rs::transform::crop;\n* use photon_rs::PhotonImage;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* let cropped_img: PhotonImage = crop(&mut img, 0_u32, 0_u32, 500_u32, 800_u32);\n* // Write the contents of this image in JPG format.\n* save_image(cropped_img, \\\"cropped_image.jpg\\\");\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} x1\n* @param {number} y1\n* @param {number} x2\n* @param {number} y2\n* @returns {PhotonImage}\n*/\nexport function crop(photon_image, x1, y1, x2, y2) {\n    _assertClass(photon_image, PhotonImage);\n    var ret = wasm.crop(photon_image.ptr, x1, y1, x2, y2);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* @param {any} source_canvas\n* @param {number} width\n* @param {number} height\n* @param {number} left\n* @param {number} top\n* @returns {any}\n*/\nexport function crop_img_browser(source_canvas, width, height, left, top) {\n    var ret = wasm.crop_img_browser(addHeapObject(source_canvas), width, height, left, top);\n    return takeObject(ret);\n}\n\n/**\n* Flip an image horizontally.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to flip an image horizontally:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::fliph;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* fliph(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function fliph(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.fliph(photon_image.ptr);\n}\n\n/**\n* Flip an image vertically.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to flip an image vertically:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::flipv;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* flipv(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function flipv(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.flipv(photon_image.ptr);\n}\n\n/**\n* Resize an image on the web.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n* * `sampling_filter` - Nearest = 1, Triangle = 2, CatmullRom = 3, Gaussian = 4, Lanczos3 = 5\n* @param {PhotonImage} photon_img\n* @param {number} width\n* @param {number} height\n* @param {number} sampling_filter\n* @returns {any}\n*/\nexport function resize_img_browser(photon_img, width, height, sampling_filter) {\n    _assertClass(photon_img, PhotonImage);\n    var ret = wasm.resize_img_browser(photon_img.ptr, width, height, sampling_filter);\n    return takeObject(ret);\n}\n\n/**\n* Resize an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n* * `sampling_filter` - Nearest = 1, Triangle = 2, CatmullRom = 3, Gaussian = 4, Lanczos3 = 5\n* @param {PhotonImage} photon_img\n* @param {number} width\n* @param {number} height\n* @param {number} sampling_filter\n* @returns {PhotonImage}\n*/\nexport function resize(photon_img, width, height, sampling_filter) {\n    _assertClass(photon_img, PhotonImage);\n    var ret = wasm.resize(photon_img.ptr, width, height, sampling_filter);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Resize image using seam carver.\n* Resize only if new dimensions are smaller, than original image.\n* # NOTE: This is still experimental feature, and pretty slow.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n*\n* ## Example\n*\n* ```\n* // For example, resize image using seam carver:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::seam_carve;\n* use photon_rs::PhotonImage;\n*\n* let img = open_image(\\\"img.jpg\\\");\n* let result: PhotonImage = seam_carve(&img, 100_u32, 100_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nexport function seam_carve(img, width, height) {\n    _assertClass(img, PhotonImage);\n    var ret = wasm.seam_carve(img.ptr, width, height);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Apply a monochrome effect of a certain colour.\n*\n* It does so by averaging the R, G, and B values of a pixel, and then adding a\n* separate value to that averaged value for each channel to produce a tint.\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `r_offset` - The value to add to the Red channel per pixel.\n* * `g_offset` - The value to add to the Green channel per pixel.\n* * `b_offset` - The value to add to the Blue channel per pixel.\n*\n* # Example\n*\n* ```\n* // For example, to apply a monochrome effect to an image:\n* use photon_rs::monochrome::monochrome;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* monochrome(&mut img, 40_u32, 50_u32, 100_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n*/\nexport function monochrome(img, r_offset, g_offset, b_offset) {\n    _assertClass(img, PhotonImage);\n    wasm.monochrome(img.ptr, r_offset, g_offset, b_offset);\n}\n\n/**\n* Convert an image to sepia.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to sepia an image of type `PhotonImage`:\n* use photon_rs::monochrome::sepia;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* sepia(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function sepia(img) {\n    _assertClass(img, PhotonImage);\n    wasm.sepia(img.ptr);\n}\n\n/**\n* Convert an image to grayscale using the conventional averaging algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to grayscale:\n* use photon_rs::monochrome::grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* grayscale(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function grayscale(img) {\n    _assertClass(img, PhotonImage);\n    wasm.grayscale(img.ptr);\n}\n\n/**\n* Convert an image to grayscale with a human corrected factor, to account for human vision.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to grayscale with a human corrected factor:\n* use photon_rs::monochrome::grayscale_human_corrected;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* grayscale_human_corrected(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function grayscale_human_corrected(img) {\n    _assertClass(img, PhotonImage);\n    wasm.grayscale_human_corrected(img.ptr);\n}\n\n/**\n* Desaturate an image by getting the min/max of each pixel\\'s RGB values.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to desaturate an image:\n* use photon_rs::monochrome::desaturate;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* desaturate(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function desaturate(img) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate(img.ptr);\n}\n\n/**\n* Uses a min. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with min decomposition:\n* use photon_rs::monochrome::decompose_min;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* decompose_min(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function decompose_min(img) {\n    _assertClass(img, PhotonImage);\n    wasm.decompose_min(img.ptr);\n}\n\n/**\n* Uses a max. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with max decomposition:\n* use photon_rs::monochrome::decompose_max;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* decompose_max(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function decompose_max(img) {\n    _assertClass(img, PhotonImage);\n    wasm.decompose_max(img.ptr);\n}\n\n/**\n* Employ only a limited number of gray shades in an image.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `num_shades` - The number of grayscale shades to be displayed in the image.\n* # Example\n*\n* ```\n* // For example, to limit an image to four shades of gray only:\n* use photon_rs::monochrome::grayscale_shades;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* grayscale_shades(&mut img, 4_u8);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_shades\n*/\nexport function grayscale_shades(photon_image, num_shades) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.grayscale_shades(photon_image.ptr, num_shades);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Red channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::monochrome::r_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* r_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function r_grayscale(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.r_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Green channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::monochrome::g_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* g_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function g_grayscale(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.g_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Blue channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::monochrome::b_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* b_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function b_grayscale(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.b_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to a chosen channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `channel` - A usize representing the channel from 0 to 2. O represents the Red channel, 1 the Green channel, and 2 the Blue channel.\n* # Example\n* To grayscale using only values from the Red channel:\n* ```\n* use photon_rs::monochrome::single_channel_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* single_channel_grayscale(&mut img, 0_usize);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel\n*/\nexport function single_channel_grayscale(photon_image, channel) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.single_channel_grayscale(photon_image.ptr, channel);\n}\n\n/**\n* Threshold an image using a standard thresholding algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `threshold` - The amount the image should be thresholded by from 0 to 255.\n* # Example\n*\n* ```\n* // For example, to threshold an image of type `PhotonImage`:\n* use photon_rs::monochrome::threshold;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* threshold(&mut img, 30_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} threshold\n*/\nexport function threshold(img, threshold) {\n    _assertClass(img, PhotonImage);\n    wasm.threshold(img.ptr, threshold);\n}\n\n/**\n* Add bordered-text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon_rs::native::open_image;\n* use photon_rs::text::draw_text_with_border;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* draw_text_with_border(&mut img, \\\"Welcome to Photon!\\\", 10_u32, 10_u32);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n*/\nexport function draw_text_with_border(photon_img, text, x, y) {\n    _assertClass(photon_img, PhotonImage);\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.draw_text_with_border(photon_img.ptr, ptr0, len0, x, y);\n}\n\n/**\n* Add text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon_rs::native::open_image;\n* use photon_rs::text::draw_text;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* draw_text(&mut img, \\\"Welcome to Photon!\\\", 10_u32, 10_u32);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n*/\nexport function draw_text(photon_img, text, x, y) {\n    _assertClass(photon_img, PhotonImage);\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.draw_text(photon_img.ptr, ptr0, len0, x, y);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* [temp] Check if WASM is supported.\n*/\nexport function run() {\n    wasm.run();\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* Get the ImageData from a 2D canvas context\n* @param {any} canvas\n* @param {any} ctx\n* @returns {any}\n*/\nexport function get_image_data(canvas, ctx) {\n    try {\n        var ret = wasm.get_image_data(addBorrowedObject(canvas), addBorrowedObject(ctx));\n        return takeObject(ret);\n    } finally {\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Place a PhotonImage onto a 2D canvas.\n* @param {any} canvas\n* @param {any} ctx\n* @param {PhotonImage} new_image\n*/\nexport function putImageData(canvas, ctx, new_image) {\n    _assertClass(new_image, PhotonImage);\n    var ptr0 = new_image.ptr;\n    new_image.ptr = 0;\n    wasm.putImageData(addHeapObject(canvas), addHeapObject(ctx), ptr0);\n}\n\n/**\n* Convert a HTML5 Canvas Element to a PhotonImage.\n*\n* This converts the ImageData found in the canvas context to a PhotonImage,\n* which can then have effects or filters applied to it.\n* @param {any} canvas\n* @param {any} ctx\n* @returns {PhotonImage}\n*/\nexport function open_image(canvas, ctx) {\n    var ret = wasm.open_image(addHeapObject(canvas), addHeapObject(ctx));\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Convert ImageData to a raw pixel vec of u8s.\n* @param {any} imgdata\n* @returns {Uint8Array}\n*/\nexport function to_raw_pixels(imgdata) {\n    wasm.to_raw_pixels(8, addHeapObject(imgdata));\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v0;\n}\n\n/**\n* Convert a base64 string to a PhotonImage.\n* @param {string} base64\n* @returns {PhotonImage}\n*/\nexport function base64_to_image(base64) {\n    var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.base64_to_image(ptr0, len0);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Convert a base64 string to a Vec of u8s.\n* @param {string} base64\n* @returns {Uint8Array}\n*/\nexport function base64_to_vec(base64) {\n    var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.base64_to_vec(8, ptr0, len0);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v1 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v1;\n}\n\n/**\n* Convert a PhotonImage to JS-compatible ImageData.\n* @param {PhotonImage} photon_image\n* @returns {any}\n*/\nexport function to_image_data(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    var ret = wasm.to_image_data(ptr0);\n    return takeObject(ret);\n}\n\n/**\n* Add a watermark to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `watermark` - The watermark to be placed onto the `img` image.\n* * `x` - The x coordinate where the watermark\\'s top corner should be positioned.\n* * `y` - The y coordinate where the watermark\\'s top corner should be positioned.\n* # Example\n*\n* ```\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon_rs::multiple::watermark;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* let water_mark = open_image(\\\"watermark.jpg\\\");\n* watermark(&mut img, &water_mark, 30_u32, 40_u32);\n* ```\n* @param {PhotonImage} img\n* @param {PhotonImage} watermark\n* @param {number} x\n* @param {number} y\n*/\nexport function watermark(img, watermark, x, y) {\n    _assertClass(img, PhotonImage);\n    _assertClass(watermark, PhotonImage);\n    wasm.watermark(img.ptr, watermark.ptr, x, y);\n}\n\n/**\n* Blend two images together.\n*\n* The `blend_mode` (3rd param) determines which blending mode to use; change this for varying effects.\n* The blend modes available include: `overlay`, `over`, `atop`, `xor`, `multiply`, `burn`, `soft_light`, `hard_light`,\n* `difference`, `lighten`, `darken`, `dodge`, `plus`, `exclusion` (more to come)\n* NOTE: The first image must be smaller than the second image passed as params.\n* If the first image were larger than the second, then there would be overflowing pixels which would have no corresponding pixels\n* in the second image.\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `img2` - The 2nd DynamicImage to be blended with the first.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```\n* // For example, to blend two images with the `multiply` blend mode:\n* use photon_rs::multiple::blend;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* let img2 = open_image(\\\"img2.jpg\\\");\n* blend(&mut img, &img2, \\\"multiply\\\");\n* ```\n* @param {PhotonImage} photon_image\n* @param {PhotonImage} photon_image2\n* @param {string} blend_mode\n*/\nexport function blend(photon_image, photon_image2, blend_mode) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(photon_image2, PhotonImage);\n    var ptr0 = passStringToWasm0(blend_mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.blend(photon_image.ptr, photon_image2.ptr, ptr0, len0);\n}\n\n/**\n* @param {any} source_canvas\n* @param {any} base_img\n* @param {any} overlay_img\n* @param {string} blend_mode\n*/\nexport function blend_img_browser(source_canvas, base_img, overlay_img, blend_mode) {\n    var ptr0 = passStringToWasm0(blend_mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.blend_img_browser(addHeapObject(source_canvas), addHeapObject(base_img), addHeapObject(overlay_img), ptr0, len0);\n}\n\n/**\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nexport function create_gradient(width, height) {\n    var ret = wasm.create_gradient(width, height);\n    return PhotonImage.__wrap(ret);\n}\n\n/**\n* Apply a gradient to an image.\n* @param {PhotonImage} image\n*/\nexport function apply_gradient(image) {\n    _assertClass(image, PhotonImage);\n    wasm.apply_gradient(image.ptr);\n}\n\n/**\n* Apply gamma correction.\n* Image manipulation effects in the LCh colour space\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* lch(&mut img, \\\"saturate\\\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nexport function lch(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.lch(photon_image.ptr, ptr0, len0, amt);\n}\n\n/**\n* Image manipulation effects in the HSL colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* hsl(&mut img, \\\"saturate\\\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nexport function hsl(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsl(photon_image.ptr, ptr0, len0, amt);\n}\n\n/**\n* Image manipulation in the HSV colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n*\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* hsv(&mut img, \\\"saturate\\\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nexport function hsv(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsv(photon_image.ptr, ptr0, len0, amt);\n}\n\n/**\n* Shift hue by a specified number of degrees in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon_rs::colour_spaces::hue_rotate_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* hue_rotate_hsl(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nexport function hue_rotate_hsl(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_hsl(img.ptr, degrees);\n}\n\n/**\n* Shift hue by a specified number of degrees in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSV colour space:\n* use photon_rs::colour_spaces::hue_rotate_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* hue_rotate_hsv(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nexport function hue_rotate_hsv(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_hsv(img.ptr, degrees);\n}\n\n/**\n* Shift hue by a specified number of degrees in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon_rs::colour_spaces::hue_rotate_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* hue_rotate_lch(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nexport function hue_rotate_lch(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_lch(img.ptr, degrees);\n}\n\n/**\n* Increase the image\\'s saturation by converting each pixel\\'s colour to the HSL colour space\n* and increasing the colour\\'s saturation.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 10% in the HSL colour space:\n* use photon_rs::colour_spaces::saturate_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* saturate_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function saturate_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_hsl(img.ptr, level);\n}\n\n/**\n* Increase the image\\'s saturation in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 40% in the Lch colour space:\n* use photon_rs::colour_spaces::saturate_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* saturate_lch(&mut img, 0.4_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function saturate_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_lch(img.ptr, level);\n}\n\n/**\n* Increase the image\\'s saturation in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level by which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 30% in the HSV colour space:\n* use photon_rs::colour_spaces::saturate_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* saturate_hsv(&mut img, 0.3_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function saturate_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_hsv(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::lighten_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* lighten_lch(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function lighten_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_lch(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSL colour space:\n* use photon_rs::colour_spaces::lighten_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* lighten_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function lighten_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_hsl(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSV colour space:\n* use photon_rs::colour_spaces::lighten_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* lighten_hsv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function lighten_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_hsv(img.ptr, level);\n}\n\n/**\n* Darken the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::darken_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* darken_lch(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function darken_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_lch(img.ptr, level);\n}\n\n/**\n* Darken the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSL colour space:\n* use photon_rs::colour_spaces::darken_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* darken_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function darken_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_hsl(img.ptr, level);\n}\n\n/**\n* Darken the image\\'s colours by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSV colour space:\n* use photon_rs::colour_spaces::darken_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* darken_hsv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function darken_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_hsv(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the HSV colour space:\n* use photon_rs::colour_spaces::desaturate_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* desaturate_hsv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function desaturate_hsv(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_hsv(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::desaturate_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* desaturate_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function desaturate_hsl(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_hsl(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::desaturate_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\\\"img.jpg\\\");\n* desaturate_lch(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nexport function desaturate_lch(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_lch(img.ptr, level);\n}\n\n/**\n* Mix image with a single color, supporting passing `opacity`.\n* The algorithm comes from Jimp. See `function mix` and `function colorFn` at following link:\n* https://github.com/oliver-moran/jimp/blob/29679faa597228ff2f20d34c5758e4d2257065a3/packages/plugin-color/src/index.js\n* Specifically, result_value = (mix_color_value - origin_value) * opacity + origin_value =\n* mix_color_value * opacity + (1 - opacity) * origin_value for each\n* of RGB channel.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `mix_color` - the color to be mixed in, as an RGB value.\n* * `opacity` - the opacity of color when mixed to image. Float value from 0 to 1.\n* # Example\n*\n* ```\n* // For example, to mix an image with rgb (50, 255, 254) and opacity 0.4:\n* use photon_rs::Rgb;\n* use photon_rs::colour_spaces::mix_with_colour;\n* use photon_rs::native::open_image;\n*\n* let mix_colour = Rgb::new(50_u8, 255_u8, 254_u8);\n* let mut img = open_image(\\\"img.jpg\\\");\n* mix_with_colour(&mut img, mix_colour, 0.4_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} mix_colour\n* @param {number} opacity\n*/\nexport function mix_with_colour(photon_image, mix_colour, opacity) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(mix_colour, Rgb);\n    var ptr0 = mix_colour.ptr;\n    mix_colour.ptr = 0;\n    wasm.mix_with_colour(photon_image.ptr, ptr0, opacity);\n}\n\n/**\n* Solarization on the Blue channel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::neue;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* neue(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function neue(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.neue(photon_image.ptr);\n}\n\n/**\n* Solarization on the Red and Green channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::lix;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* lix(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function lix(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.lix(photon_image.ptr);\n}\n\n/**\n* Solarization on the Red and Blue channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::ryo;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* ryo(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nexport function ryo(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.ryo(photon_image.ptr);\n}\n\n/**\n* Apply a filter to an image. Over 20 filters are available.\n* The filters are as follows:\n* * **oceanic**: Add an aquamarine-tinted hue to an image.\n* * **islands**: Aquamarine tint.\n* * **marine**: Add a green/blue mixed hue to an image.\n* * **seagreen**: Dark green hue, with tones of blue.\n* * **flagblue**: Royal blue tint\n* * **liquid**: Blue-inspired tint.\n* * **diamante**: Custom filter with a blue/turquoise tint.\n* * **radio**: Fallout-style radio effect.\n* * **twenties**: Slight-blue tinted historical effect.\n* * **rosetint**: Rose-tinted filter.\n* * **mauve**: Purple-infused filter.\n* * **bluechrome**: Blue monochrome effect.\n* * **vintage**: Vintage filter with a red tint.\n* * **perfume**: Increase the blue channel, with moderate increases in the Red and Green channels.\n* * **serenity**: Custom filter with an increase in the Blue channel\\'s values.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `filter_name` - The filter\\'s name. Choose from the selection above, eg: \\\"oceanic\\\n* # Example\n*\n* ```\n* // For example, to add a filter called \\\"vintage\\\" to an image:\n* use photon_rs::filters::filter;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* filter(&mut img, \\\"vintage\\\");\n* ```\n* @param {PhotonImage} img\n* @param {string} filter_name\n*/\nexport function filter(img, filter_name) {\n    _assertClass(img, PhotonImage);\n    var ptr0 = passStringToWasm0(filter_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.filter(img.ptr, ptr0, len0);\n}\n\n/**\n* Apply a lofi effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::lofi;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* lofi(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function lofi(img) {\n    _assertClass(img, PhotonImage);\n    wasm.lofi(img.ptr);\n}\n\n/**\n* Add a rose tint to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::pastel_pink;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* pastel_pink(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function pastel_pink(img) {\n    _assertClass(img, PhotonImage);\n    wasm.pastel_pink(img.ptr);\n}\n\n/**\n* Apply a vintage, golden hue to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::golden;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* golden(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function golden(img) {\n    _assertClass(img, PhotonImage);\n    wasm.golden(img.ptr);\n}\n\n/**\n* Increased contrast filter effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::cali;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* cali(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function cali(img) {\n    _assertClass(img, PhotonImage);\n    wasm.cali(img.ptr);\n}\n\n/**\n* Increased contrast, greyscale effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::dramatic;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* dramatic(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function dramatic(img) {\n    _assertClass(img, PhotonImage);\n    wasm.dramatic(img.ptr);\n}\n\n/**\n* Apply a red hue, with increased contrast and brightness.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::firenze;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* firenze(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function firenze(img) {\n    _assertClass(img, PhotonImage);\n    wasm.firenze(img.ptr);\n}\n\n/**\n* Apply a greyscale effect with increased contrast.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* use photon_rs::filters::obsidian;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\\\"img.jpg\\\");\n* obsidian(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nexport function obsidian(img) {\n    _assertClass(img, PhotonImage);\n    wasm.obsidian(img.ptr);\n}\n\nfunction handleError(e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetUint8ClampedMemory0 = null;\nfunction getUint8ClampedMemory0() {\n    if (cachegetUint8ClampedMemory0 === null || cachegetUint8ClampedMemory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8ClampedMemory0 = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachegetUint8ClampedMemory0;\n}\n\nfunction getClampedArrayU8FromWasm0(ptr, len) {\n    return getUint8ClampedMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nexport const SamplingFilter = Object.freeze({ Nearest:1,Triangle:2,CatmullRom:3,Gaussian:4,Lanczos3:5, });\n/**\n* Provides the image\\'s height, width, and contains the image\\'s raw pixels.\n* For use when communicating between JS and WASM, and also natively.\n*/\nexport class PhotonImage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PhotonImage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_photonimage_free(ptr);\n    }\n    /**\n    * Create a new PhotonImage from a Vec of u8s, which represent raw pixels.\n    * @param {Uint8Array} raw_pixels\n    * @param {number} width\n    * @param {number} height\n    */\n    constructor(raw_pixels, width, height) {\n        var ptr0 = passArray8ToWasm0(raw_pixels, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new(ptr0, len0, width, height);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Create a new PhotonImage from a base64 string.\n    * @param {string} base64\n    * @returns {PhotonImage}\n    */\n    static new_from_base64(base64) {\n        var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new_from_base64(ptr0, len0);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Create a new PhotonImage from a byteslice.\n    * @param {Uint8Array} vec\n    * @returns {PhotonImage}\n    */\n    static new_from_byteslice(vec) {\n        var ptr0 = passArray8ToWasm0(vec, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new_from_byteslice(ptr0, len0);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Get the width of the PhotonImage.\n    * @returns {number}\n    */\n    get_width() {\n        var ret = wasm.photonimage_get_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the PhotonImage\\'s pixels as a Vec of u8s.\n    * @returns {Uint8Array}\n    */\n    get_raw_pixels() {\n        wasm.photonimage_get_raw_pixels(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * Get the height of the PhotonImage.\n    * @returns {number}\n    */\n    get_height() {\n        var ret = wasm.photonimage_get_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Convert the PhotonImage to base64.\n    * @returns {string}\n    */\n    get_base64() {\n        try {\n            wasm.photonimage_get_base64(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Convert the PhotonImage\\'s raw pixels to JS-compatible ImageData.\n    * @returns {any}\n    */\n    get_image_data() {\n        var ret = wasm.photonimage_get_image_data(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Convert ImageData to raw pixels, and update the PhotonImage\\'s raw pixels to this.\n    * @param {any} img_data\n    */\n    set_imgdata(img_data) {\n        wasm.photonimage_set_imgdata(this.ptr, addHeapObject(img_data));\n    }\n}\n/**\n* RGB color type.\n*/\nexport class Rgb {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rgb.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rgb_free(ptr);\n    }\n    /**\n    * Create a new RGB struct.\n    * @param {number} r\n    * @param {number} g\n    * @param {number} b\n    */\n    constructor(r, g, b) {\n        var ret = wasm.rgb_new(r, g, b);\n        return Rgb.__wrap(ret);\n    }\n    /**\n    * Set the Red value.\n    * @param {number} r\n    */\n    set_red(r) {\n        wasm.rgb_set_red(this.ptr, r);\n    }\n    /**\n    * Get the Green value.\n    * @param {number} g\n    */\n    set_green(g) {\n        wasm.rgb_set_green(this.ptr, g);\n    }\n    /**\n    * Set the Blue value.\n    * @param {number} b\n    */\n    set_blue(b) {\n        wasm.rgb_set_blue(this.ptr, b);\n    }\n    /**\n    * Get the Red value.\n    * @returns {number}\n    */\n    get_red() {\n        var ret = wasm.rgb_get_red(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Green value.\n    * @returns {number}\n    */\n    get_green() {\n        var ret = wasm.rgb_get_green(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Blue value.\n    * @returns {number}\n    */\n    get_blue() {\n        var ret = wasm.rgb_get_blue(this.ptr);\n        return ret;\n    }\n}\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __widl_instanceof_Window = function(arg0) {\n    var ret = getObject(arg0) instanceof Window;\n    return ret;\n};\n\nexport const __widl_instanceof_CanvasRenderingContext2D = function(arg0) {\n    var ret = getObject(arg0) instanceof CanvasRenderingContext2D;\n    return ret;\n};\n\nexport const __widl_f_set_global_composite_operation_CanvasRenderingContext2D = function(arg0, arg1, arg2) {\n    try {\n        getObject(arg0).globalCompositeOperation = getStringFromWasm0(arg1, arg2);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_draw_image_with_html_image_element_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3) {\n    try {\n        getObject(arg0).drawImage(getObject(arg1), arg2, arg3);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    try {\n        getObject(arg0).drawImage(getObject(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_get_image_data_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3, arg4) {\n    try {\n        var ret = getObject(arg0).getImageData(arg1, arg2, arg3, arg4);\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_put_image_data_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3) {\n    try {\n        getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_create_element_Document = function(arg0, arg1, arg2) {\n    try {\n        var ret = getObject(arg0).createElement(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_body_Document = function(arg0) {\n    var ret = getObject(arg0).body;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nexport const __widl_instanceof_HTMLCanvasElement = function(arg0) {\n    var ret = getObject(arg0) instanceof HTMLCanvasElement;\n    return ret;\n};\n\nexport const __widl_f_get_context_HTMLCanvasElement = function(arg0, arg1, arg2) {\n    try {\n        var ret = getObject(arg0).getContext(getStringFromWasm0(arg1, arg2));\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_width_HTMLCanvasElement = function(arg0) {\n    var ret = getObject(arg0).width;\n    return ret;\n};\n\nexport const __widl_f_set_width_HTMLCanvasElement = function(arg0, arg1) {\n    getObject(arg0).width = arg1 >>> 0;\n};\n\nexport const __widl_f_height_HTMLCanvasElement = function(arg0) {\n    var ret = getObject(arg0).height;\n    return ret;\n};\n\nexport const __widl_f_set_height_HTMLCanvasElement = function(arg0, arg1) {\n    getObject(arg0).height = arg1 >>> 0;\n};\n\nexport const __widl_f_new_with_u8_clamped_array_and_sh_ImageData = function(arg0, arg1, arg2, arg3) {\n    try {\n        var ret = new ImageData(getClampedArrayU8FromWasm0(arg0, arg1), arg2 >>> 0, arg3 >>> 0);\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_width_ImageData = function(arg0) {\n    var ret = getObject(arg0).width;\n    return ret;\n};\n\nexport const __widl_f_height_ImageData = function(arg0) {\n    var ret = getObject(arg0).height;\n    return ret;\n};\n\nexport const __widl_f_data_ImageData = function(arg0, arg1) {\n    var ret = getObject(arg1).data;\n    var ptr0 = passArray8ToWasm0(ret, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __widl_f_append_child_Node = function(arg0, arg1) {\n    try {\n        var ret = getObject(arg0).appendChild(getObject(arg1));\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __widl_f_set_text_content_Node = function(arg0, arg1, arg2) {\n    getObject(arg0).textContent = arg1 === 0 ? undefined : getStringFromWasm0(arg1, arg2);\n};\n\nexport const __widl_f_document_Window = function(arg0) {\n    var ret = getObject(arg0).document;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nexport const __wbg_call_12b949cfc461d154 = function(arg0, arg1) {\n    try {\n        var ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __wbindgen_object_clone_ref = function(arg0) {\n    var ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newnoargs_c4b2cbbd30e2d057 = function(arg0, arg1) {\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_globalThis_22e06d4bea0084e3 = function() {\n    try {\n        var ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __wbg_self_00b0599bca667294 = function() {\n    try {\n        var ret = self.self;\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __wbg_window_aa795c5aad79b8ac = function() {\n    try {\n        var ret = window.window;\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __wbg_global_cc239dc2303f417c = function() {\n    try {\n        var ret = global.global;\n        return addHeapObject(ret);\n    } catch (e) {\n        handleError(e)\n    }\n};\n\nexport const __wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport const __wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n"],"sourceRoot":""}